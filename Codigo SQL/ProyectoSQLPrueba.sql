-- MySQL Script generated by MySQL Workbench
-- 05/09/17 23:46:30
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema SpaceAdmind
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `SpaceAdmind` ;

-- -----------------------------------------------------
-- Schema SpaceAdmind
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `SpaceAdmind` DEFAULT CHARACTER SET utf8 ;
USE `SpaceAdmind` ;

-- -----------------------------------------------------
-- Table `SpaceAdmind`.`RedesSociales`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`RedesSociales` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`RedesSociales` (
  `idRedesSociales` VARCHAR(91) NOT NULL,
  `FaceBook` VARCHAR(60) NULL,
  `Twitter` VARCHAR(60) NULL,
  `Linkedin` VARCHAR(60) NULL,
  `Instagram` VARCHAR(60) NULL,
  `Google` VARCHAR(60) NULL,
  PRIMARY KEY (`idRedesSociales`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`PrivacidadUsuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`PrivacidadUsuario` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`PrivacidadUsuario` (
  `idPrivacidadUsuario` VARCHAR(10) NOT NULL COMMENT 'Id = Mc + MorgP + MogrPer + MRedesS + MT\n\nID = GenericT = 11111\n     = GenericF = 00000',
  `MostrarCorreo` TINYINT(1) NOT NULL,
  `MostrarOrgPropias` TINYINT(1) NOT NULL,
  `MostrarOrgPertenece` TINYINT(1) NOT NULL,
  `MostrarRedesSociales` TINYINT(1) NOT NULL,
  `MostrarTelefono` TINYINT(1) NOT NULL,
  PRIMARY KEY (`idPrivacidadUsuario`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Usuario` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Usuario` (
  `idUsuario` VARCHAR(45) NOT NULL COMMENT 'Probando Comentario = Joder',
  `claveUsuario` VARCHAR(25) NOT NULL,
  `nombreUsuario` VARCHAR(100) NOT NULL,
  `descripcion` VARCHAR(230) NULL,
  `telefonoCelular` VARCHAR(25) NULL,
  `correoElectronico` VARCHAR(80) NOT NULL,
  `idRedesSociales` VARCHAR(45) NULL,
  `idPrivacidad` VARCHAR(10) NOT NULL,
  `estadoUsuario` TINYINT(1) NOT NULL,
  `fechaCreacion` TIMESTAMP NOT NULL,
  PRIMARY KEY (`idUsuario`),
  INDEX `idRedesSocialesUsuer_idx` (`idRedesSociales` ASC),
  INDEX `idPrivacidadU_idx` (`idPrivacidad` ASC),
  CONSTRAINT `idRedesSocialesUsuer`
    FOREIGN KEY (`idRedesSociales`)
    REFERENCES `SpaceAdmind`.`RedesSociales` (`idRedesSociales`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idPrivacidadU`
    FOREIGN KEY (`idPrivacidad`)
    REFERENCES `SpaceAdmind`.`PrivacidadUsuario` (`idPrivacidadUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Permisos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Permisos` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Permisos` (
  `idPermisos` VARCHAR(12) NOT NULL,
  `Boss` TINYINT(1) NOT NULL,
  `P_Reserva` TINYINT(1) NOT NULL,
  `P_Nivel` TINYINT(1) NOT NULL,
  `P_Bloque` TINYINT(1) NOT NULL,
  `P_Sede` TINYINT(1) NOT NULL,
  `P_Org` TINYINT(1) NOT NULL,
  `PC_B` TINYINT(1) NOT NULL,
  `PC_S` TINYINT(1) NOT NULL,
  `PC_N` TINYINT(1) NOT NULL,
  `PC_E` TINYINT(1) NOT NULL,
  `P_Encargado` TINYINT(1) NOT NULL,
  PRIMARY KEY (`idPermisos`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Organizacion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Organizacion` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Organizacion` (
  `idUsuarioCreador` VARCHAR(45) NOT NULL,
  `consecutivoOrg` INT(4) NOT NULL,
  `nombre_Org` VARCHAR(100) NOT NULL,
  `descripcion_Org` VARCHAR(140) NULL,
  `idPermisosEstandar` VARCHAR(45) NOT NULL,
  `idRedesSociales` VARCHAR(91) NULL,
  `telefonoOrg` VARCHAR(45) NULL,
  `estadoOrg` TINYINT(1) NOT NULL,
  `fechaCreacion` TIMESTAMP NOT NULL,
  `tipoEnroll` VARCHAR(2) NOT NULL,
  PRIMARY KEY (`idUsuarioCreador`, `consecutivoOrg`),
  INDEX `idPermisosEstandar_idx` (`idPermisosEstandar` ASC),
  INDEX `IdRedesSociales_idx` (`idRedesSociales` ASC),
  CONSTRAINT `idPermisosEstandarOrg`
    FOREIGN KEY (`idPermisosEstandar`)
    REFERENCES `SpaceAdmind`.`Permisos` (`idPermisos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `IdRedesSociales`
    FOREIGN KEY (`idRedesSociales`)
    REFERENCES `SpaceAdmind`.`RedesSociales` (`idRedesSociales`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idCreadorUsuario`
    FOREIGN KEY (`idUsuarioCreador`)
    REFERENCES `SpaceAdmind`.`Usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Pais`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Pais` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Pais` (
  `idPais` INT NOT NULL AUTO_INCREMENT,
  `nombreP` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idPais`))
ENGINE = InnoDB
AUTO_INCREMENT = 0;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Departamento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Departamento` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Departamento` (
  `idDepartamento` INT NOT NULL AUTO_INCREMENT,
  `idPais` INT NOT NULL,
  `nombreDep` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idDepartamento`, `idPais`),
  INDEX `idPais_idx` (`idPais` ASC),
  CONSTRAINT `idPais`
    FOREIGN KEY (`idPais`)
    REFERENCES `SpaceAdmind`.`Pais` (`idPais`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 0;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Ciudad`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Ciudad` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Ciudad` (
  `idCiudad` INT NOT NULL,
  `idDepartamento` INT NOT NULL,
  `idPais` INT NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idCiudad`, `idDepartamento`, `idPais`),
  INDEX `idDep_idx` (`idDepartamento` ASC, `idPais` ASC),
  CONSTRAINT `idDep`
    FOREIGN KEY (`idDepartamento` , `idPais`)
    REFERENCES `SpaceAdmind`.`Departamento` (`idDepartamento` , `idPais`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Direccion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Direccion` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Direccion` (
  `idDireccion` INT NOT NULL COMMENT 'ID = idOrgCreador + _$_ + idOrgContador + _#_ + contSede',
  `idCiudad` INT NOT NULL,
  `idDepartamento` INT NOT NULL,
  `idPais` INT NOT NULL,
  `direccion` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`idDireccion`),
  INDEX `idCiudad_idx` (`idCiudad` ASC, `idDepartamento` ASC, `idPais` ASC),
  CONSTRAINT `idCiudad`
    FOREIGN KEY (`idCiudad` , `idDepartamento` , `idPais`)
    REFERENCES `SpaceAdmind`.`Ciudad` (`idCiudad` , `idDepartamento` , `idPais`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 0;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`OrgUsuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`OrgUsuario` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`OrgUsuario` (
  `idOrgUsuario` VARCHAR(97) NOT NULL COMMENT 'Pk = idOrgCreador + \'_$_ \' + idContador + \'@\' +idUsuario\n     =       45              +   3    +        3         +   1  +     45\n     =  97\n\nidContador  menor o igul 999',
  `idOrgUsuarioCreador` VARCHAR(45) NOT NULL,
  `idOrgContador` INT(4) NOT NULL,
  `idUsuario` VARCHAR(45) NOT NULL,
  `idPermisos` VARCHAR(12) NOT NULL,
  `nombrePilaUser` VARCHAR(45) NOT NULL,
  `estadoUsuario` VARCHAR(5) NOT NULL,
  `fechaEstado` TIMESTAMP NOT NULL,
  PRIMARY KEY (`idOrgUsuario`),
  INDEX `idUsuario_idx` (`idUsuario` ASC),
  INDEX `idPermiso_idx` (`idPermisos` ASC),
  INDEX `idOrgOrgUsuario_idx` (`idOrgUsuarioCreador` ASC, `idOrgContador` ASC),
  CONSTRAINT `idUsuarioOrgUsuarioJoder`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `SpaceAdmind`.`Usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idOrgGeneral`
    FOREIGN KEY (`idOrgUsuarioCreador` , `idOrgContador`)
    REFERENCES `SpaceAdmind`.`Organizacion` (`idUsuarioCreador` , `consecutivoOrg`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idPermisoOrgUsuarioJoder`
    FOREIGN KEY (`idPermisos`)
    REFERENCES `SpaceAdmind`.`Permisos` (`idPermisos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Sede`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Sede` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Sede` (
  `idSede` INT NOT NULL DEFAULT 0,
  `idOrgUsuarioCreador` VARCHAR(45) NOT NULL,
  `idOrgContador` INT NOT NULL DEFAULT 0,
  `idDireccionSede` INT NULL,
  `idUsuarioEncargado` VARCHAR(97) NOT NULL,
  `nombreSede` VARCHAR(45) NOT NULL,
  `fechaCreacion` TIMESTAMP NOT NULL,
  PRIMARY KEY (`idSede`, `idOrgUsuarioCreador`, `idOrgContador`),
  INDEX `idOrg_idx` (`idOrgUsuarioCreador` ASC, `idOrgContador` ASC),
  INDEX `idDireccion_idx` (`idDireccionSede` ASC),
  INDEX `idUsuarioEncargado_idx` (`idUsuarioEncargado` ASC),
  CONSTRAINT `idSedeOrgUsuarioCreador`
    FOREIGN KEY (`idOrgUsuarioCreador` , `idOrgContador`)
    REFERENCES `SpaceAdmind`.`Organizacion` (`idUsuarioCreador` , `consecutivoOrg`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idSedeDireccion`
    FOREIGN KEY (`idDireccionSede`)
    REFERENCES `SpaceAdmind`.`Direccion` (`idDireccion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idUsuarioEncargado`
    FOREIGN KEY (`idUsuarioEncargado`)
    REFERENCES `SpaceAdmind`.`OrgUsuario` (`idOrgUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Bloque`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Bloque` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Bloque` (
  `idBloque` INT NOT NULL DEFAULT 0,
  `idSede` INT NOT NULL DEFAULT 0,
  `idOrgCreador` VARCHAR(45) NOT NULL,
  `idOrgConsecutivo` INT NOT NULL DEFAULT 0,
  `nombreBloque` VARCHAR(45) NOT NULL,
  `idUsuarioEncargado` VARCHAR(97) NOT NULL,
  `descripcionBloqe` VARCHAR(140) NULL,
  `Estado` VARCHAR(2) NOT NULL,
  `fechaEstado` VARCHAR(45) NOT NULL,
  `fechaCreacion` TIMESTAMP NOT NULL,
  PRIMARY KEY (`idBloque`, `idSede`, `idOrgCreador`, `idOrgConsecutivo`),
  INDEX `idSede_idx` (`idSede` ASC, `idOrgCreador` ASC, `idOrgConsecutivo` ASC),
  INDEX `idBloqueUsuarioEncargado_idx` (`idUsuarioEncargado` ASC),
  CONSTRAINT `idBloqueSedeId`
    FOREIGN KEY (`idSede` , `idOrgCreador` , `idOrgConsecutivo`)
    REFERENCES `SpaceAdmind`.`Sede` (`idSede` , `idOrgUsuarioCreador` , `idOrgContador`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idBloqueUsuarioEncargado`
    FOREIGN KEY (`idUsuarioEncargado`)
    REFERENCES `SpaceAdmind`.`OrgUsuario` (`idOrgUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`EspaciosPublicos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`EspaciosPublicos` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`EspaciosPublicos` (
  `idEspaciosPublcos` VARCHAR(4) NOT NULL,
  `tieneBanos` TINYINT(1) NOT NULL,
  `tieneCocineta` TINYINT(1) NOT NULL,
  `tieneSalaEstar` TINYINT(1) NOT NULL,
  PRIMARY KEY (`idEspaciosPublcos`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Nivel`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Nivel` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Nivel` (
  `idNivel` INT NOT NULL,
  `idBloque` INT NOT NULL,
  `idSede` INT NOT NULL,
  `idOrgCreador` VARCHAR(45) NOT NULL,
  `idOrgConsecutivo` INT NOT NULL,
  `numeroNivel` INT NOT NULL,
  `idUsuarioEncargado` VARCHAR(97) NOT NULL,
  `idEspacioPublico` VARCHAR(4) NOT NULL,
  `descripcionNivel` VARCHAR(140) NULL,
  `fechaCreacion` TIMESTAMP NOT NULL,
  PRIMARY KEY (`idNivel`, `idBloque`, `idSede`, `idOrgCreador`, `idOrgConsecutivo`),
  INDEX `idBloque_idx` (`idBloque` ASC, `idSede` ASC, `idOrgCreador` ASC, `idOrgConsecutivo` ASC),
  INDEX `idEspaciosPublicos_idx` (`idEspacioPublico` ASC),
  INDEX `idUsuario_idx` (`idUsuarioEncargado` ASC),
  CONSTRAINT `idBloqueNivel`
    FOREIGN KEY (`idBloque` , `idSede` , `idOrgCreador` , `idOrgConsecutivo`)
    REFERENCES `SpaceAdmind`.`Bloque` (`idBloque` , `idSede` , `idOrgCreador` , `idOrgConsecutivo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idUsuarioNivel`
    FOREIGN KEY (`idUsuarioEncargado`)
    REFERENCES `SpaceAdmind`.`OrgUsuario` (`idOrgUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idEspaciosPublicosNivel`
    FOREIGN KEY (`idEspacioPublico`)
    REFERENCES `SpaceAdmind`.`EspaciosPublicos` (`idEspaciosPublcos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Espacio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Espacio` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Espacio` (
  `idEspacio` INT NOT NULL,
  `idNivel` INT NOT NULL,
  `idBloque` INT NOT NULL,
  `idSede` INT NOT NULL,
  `idOrgCreador` VARCHAR(45) NOT NULL,
  `idOrgContador` INT NOT NULL,
  `idPermiso` VARCHAR(12) NOT NULL,
  `capacidadEspacio` INT NOT NULL,
  `descripcionEspaco` VARCHAR(140) NULL,
  `nomenclaturaEspecial` VARCHAR(45) NULL,
  `fechaCreacion` TIMESTAMP NOT NULL,
  INDEX `idNivel_idx` (`idNivel` ASC, `idBloque` ASC, `idSede` ASC, `idOrgCreador` ASC, `idOrgContador` ASC),
  INDEX `idPermiso_idx` (`idPermiso` ASC),
  PRIMARY KEY (`idEspacio`, `idNivel`, `idBloque`, `idSede`, `idOrgCreador`, `idOrgContador`),
  CONSTRAINT `idNivelspacio`
    FOREIGN KEY (`idNivel` , `idBloque` , `idSede` , `idOrgCreador` , `idOrgContador`)
    REFERENCES `SpaceAdmind`.`Nivel` (`idNivel` , `idBloque` , `idSede` , `idOrgCreador` , `idOrgConsecutivo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idPermisoEspacio`
    FOREIGN KEY (`idPermiso`)
    REFERENCES `SpaceAdmind`.`Permisos` (`idPermisos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`DiasHabiles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`DiasHabiles` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`DiasHabiles` (
  `idDiasHabiles` VARCHAR(8) NOT NULL,
  `lunes` TINYINT(1) NOT NULL,
  `martes` TINYINT(1) NOT NULL,
  `miercoles` TINYINT(1) NOT NULL,
  `jueves` TINYINT(1) NOT NULL,
  `viernes` TINYINT(1) NOT NULL,
  `sabado` TINYINT(1) NOT NULL,
  `domingo` TINYINT(1) NOT NULL,
  PRIMARY KEY (`idDiasHabiles`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Reserva`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Reserva` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Reserva` (
  `idReserva` INT(8) NOT NULL,
  `idEspacio` INT NOT NULL,
  `idNivel` INT NOT NULL,
  `idBloque` INT NOT NULL,
  `idSede` INT NOT NULL,
  `idOrgCreador` VARCHAR(45) NOT NULL,
  `idOrgConsecutivo` INT(4) NOT NULL,
  `idUsuario` VARCHAR(97) NOT NULL,
  `idDiasReserva` VARCHAR(8) NOT NULL,
  `fechaInicio` DATE NOT NULL,
  `fechaFin` DATE NOT NULL,
  `horaInicio` TIME NOT NULL,
  `horaFin` TIME NOT NULL,
  `fechaReserva` TIMESTAMP NOT NULL,
  PRIMARY KEY (`idReserva`, `idEspacio`, `idNivel`, `idBloque`, `idSede`, `idOrgCreador`, `idOrgConsecutivo`, `idDiasReserva`, `fechaInicio`, `fechaFin`, `horaInicio`, `horaFin`),
  INDEX `idDiasHabiles_idx` (`idDiasReserva` ASC),
  INDEX `idUsuario_idx` (`idUsuario` ASC),
  INDEX `idEspaciosPk_idx` (`idEspacio` ASC, `idNivel` ASC, `idBloque` ASC, `idSede` ASC, `idOrgCreador` ASC, `idOrgConsecutivo` ASC),
  CONSTRAINT `idUsuarioReserva`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `SpaceAdmind`.`OrgUsuario` (`idOrgUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idDiasHabilesReserva`
    FOREIGN KEY (`idDiasReserva`)
    REFERENCES `SpaceAdmind`.`DiasHabiles` (`idDiasHabiles`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idEspaciosPk`
    FOREIGN KEY (`idEspacio` , `idNivel` , `idBloque` , `idSede` , `idOrgCreador` , `idOrgConsecutivo`)
    REFERENCES `SpaceAdmind`.`Espacio` (`idEspacio` , `idNivel` , `idBloque` , `idSede` , `idOrgCreador` , `idOrgContador`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Modificacion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Modificacion` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Modificacion` (
  `idModificacion` INT NOT NULL,
  `TipoModificacion` VARCHAR(45) NOT NULL,
  `ModOrg` VARCHAR(45) NULL,
  `ModSede` INT NULL,
  `ModBloque` INT NULL,
  `ModNivel` INT NULL,
  `ModEspacio` INT NULL,
  `ModUsuarioEnc` VARCHAR(45) NULL,
  `ModOrgCon` INT NULL,
  PRIMARY KEY (`idModificacion`),
  INDEX `ModUsuarioEn_idx` (`ModUsuarioEnc` ASC),
  INDEX `ModOrg_idx` (`ModOrg` ASC, `ModOrgCon` ASC),
  INDEX `ModSede_idx` (`ModSede` ASC),
  INDEX `ModBloque_idx` (`ModBloque` ASC),
  INDEX `ModNivel_idx` (`ModNivel` ASC),
  CONSTRAINT `ModUsuarioEn`
    FOREIGN KEY (`ModUsuarioEnc`)
    REFERENCES `SpaceAdmind`.`Usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ModOrg`
    FOREIGN KEY (`ModOrg` , `ModOrgCon`)
    REFERENCES `SpaceAdmind`.`Organizacion` (`idUsuarioCreador` , `consecutivoOrg`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ModSede`
    FOREIGN KEY (`ModSede`)
    REFERENCES `SpaceAdmind`.`Sede` (`idSede`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ModBloque`
    FOREIGN KEY (`ModBloque`)
    REFERENCES `SpaceAdmind`.`Bloque` (`idBloque`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ModNivel`
    FOREIGN KEY (`ModNivel`)
    REFERENCES `SpaceAdmind`.`Nivel` (`idNivel`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Logs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Logs` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Logs` (
  `idLogs` INT NOT NULL,
  `fechaLog` DATE NOT NULL,
  `usuarioLog` VARCHAR(45) NOT NULL,
  `IdModificacion` INT NOT NULL,
  PRIMARY KEY (`idLogs`),
  INDEX `UsuarioLog_idx` (`usuarioLog` ASC),
  INDEX `ModoficacionId_idx` (`IdModificacion` ASC),
  CONSTRAINT `UsuarioLog`
    FOREIGN KEY (`usuarioLog`)
    REFERENCES `SpaceAdmind`.`Usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ModoficacionId`
    FOREIGN KEY (`IdModificacion`)
    REFERENCES `SpaceAdmind`.`Modificacion` (`idModificacion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Mensajes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Mensajes` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Mensajes` (
  `idMensajes` INT NOT NULL,
  `idOrgCreador` VARCHAR(45) NOT NULL,
  `idOrgContador` INT(4) NOT NULL,
  `asuntoMensaje` VARCHAR(45) NOT NULL,
  `descripcionMensaje` VARCHAR(45) NOT NULL,
  `usuarioAutor` VARCHAR(97) NOT NULL,
  `tipoMensaje` VARCHAR(2) NOT NULL,
  `fechaMensaje` TIMESTAMP NOT NULL,
  PRIMARY KEY (`idMensajes`, `idOrgCreador`, `idOrgContador`),
  INDEX `OrgIdMensaje_idx` (`idOrgCreador` ASC, `idOrgContador` ASC),
  INDEX `AutorUsuarioId_idx` (`usuarioAutor` ASC),
  CONSTRAINT `OrgIdMensaje`
    FOREIGN KEY (`idOrgCreador` , `idOrgContador`)
    REFERENCES `SpaceAdmind`.`Organizacion` (`idUsuarioCreador` , `consecutivoOrg`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `AutorUsuarioId`
    FOREIGN KEY (`usuarioAutor`)
    REFERENCES `SpaceAdmind`.`OrgUsuario` (`idOrgUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`HorarioSede`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`HorarioSede` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`HorarioSede` (
  `idDiasHabiles` VARCHAR(8) NOT NULL,
  `idSede` INT NOT NULL,
  `idOrgUsuarioCreador` VARCHAR(45) NOT NULL,
  `idOrgContador` INT NOT NULL,
  `horaApertura` TIME NOT NULL,
  `horaCierre` TIME NOT NULL,
  PRIMARY KEY (`idDiasHabiles`, `idSede`, `idOrgUsuarioCreador`, `idOrgContador`, `horaApertura`, `horaCierre`),
  INDEX `IdDiasHabilesSede_idx` (`idDiasHabiles` ASC),
  INDEX `idSedeHorario_idx` (`idSede` ASC, `idOrgUsuarioCreador` ASC, `idOrgContador` ASC),
  CONSTRAINT `IdDiasHabilesSede`
    FOREIGN KEY (`idDiasHabiles`)
    REFERENCES `SpaceAdmind`.`DiasHabiles` (`idDiasHabiles`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idSedeHorario`
    FOREIGN KEY (`idSede` , `idOrgUsuarioCreador` , `idOrgContador`)
    REFERENCES `SpaceAdmind`.`Sede` (`idSede` , `idOrgUsuarioCreador` , `idOrgContador`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `SpaceAdmind` ;

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`Pais_Dep_Ciudad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Pais_Dep_Ciudad` (`Pais` INT, `Departamento` INT, `Ciudad` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`Perfil_Usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Perfil_Usuario` (`idUsuario` INT, `nombreUsuario` INT, `descripcion` INT, `telefonoCelular` INT, `correoElectronico` INT, `estadousuario` INT, `fechaCreacion` INT, `MostrarCorreo` INT, `MostrarOrgPertenece` INT, `MostrarOrgPropias` INT, `MostrarRedesSociales` INT, `MostrarTelefono` INT, `FaceBook` INT, `Twitter` INT, `Linkedin` INT, `Instagram` INT, `Google` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`Org_Administradores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Org_Administradores` (`'Usuario_Creador'` INT, `'Contador'` INT, `Encargado` INT, `Jefe` INT, `Sede` INT, `Bloque` INT, `Nivel` INT, `'Identificador'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`reservas_Mias`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`reservas_Mias` (`'Usuario_ID'` INT, `Organizacion` INT, `Sede` INT, `Bloque` INT, `Nivel` INT, `Espacio` INT, `Estado` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`org_Propias`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`org_Propias` (`idUsuario` INT, `nombrePilaUser` INT, `'Estado_Usuario'` INT, `nombre_Org` INT, `'Estado_Org'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`org_pertenece`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`org_pertenece` (`idUsuario` INT, `nombrePilaUser` INT, `'Estado_Usuario'` INT, `nombre_Org` INT, `'Estado_Org'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`mensajes_org`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`mensajes_org` (`idMensajes` INT, `idOrgCreador` INT, `idOrgContador` INT, `asuntoMensaje` INT, `descripcionMensaje` INT, `autor` INT, `tipoMensaje` INT, `fechaMensaje` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`sedes_Org`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`sedes_Org` (`idSede` INT, `idOrgUsuarioCreador` INT, `idOrgContador` INT, `nombreSede` INT, `'Encargado'` INT, `fechaCreacion` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`usuarios_Org`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`usuarios_Org` (`idOrgUsuario` INT, `idOrgUsuarioCreador` INT, `Nombre` INT, `idPermisos` INT, `nombrePilaUser` INT, `estadoUsuario` INT, `fechaEstado` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`Nivel_Bloques_Sede_Org`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Nivel_Bloques_Sede_Org` (`idNivel` INT, `idBloque` INT, `idSede` INT, `idOrgCreador` INT, `idOrgConsecutivo` INT, `numeroNivel` INT, `'Encargado'` INT, `IF(EspaciosPublicos.tieneBanos,'Si', 'No')` INT, `IF(EspaciosPublicos.tieneCocineta,'Si', 'No')` INT, `IF(EspaciosPublicos.tieneSalaEstar,'Si', 'No')` INT, `descripcionNivel` INT, `fechaCreacion` INT);

-- -----------------------------------------------------
-- procedure DataStart
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`DataStart`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `DataStart` ()
BEGIN

INSERT INTO PrivacidadUsuario VALUES ('GenericT',1,1,1,1,1);
INSERT INTO PrivacidadUsuario VALUES ('GenericF',0,0,0,0,0);
INSERT INTO RedesSociales VALUES ('GenericNull',null,null,null,null,null);
INSERT INTO Permisos VALUES ('theBoss',1,1,1,1,1,1,1,1,1,1,1);
INSERT INTO Permisos VALUES ('invitado',0,0,0,0,0,0,0,0,0,0,0);
INSERT INTO Permisos VALUES ('solicitante',0,0,0,0,0,0,0,0,0,0,0);

call insertar_Pais_Dep_Ciudad;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure orgsContador
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`orgsContador`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `orgsContador` (in userId varchar(45), inout times int)
BEGIN
	SELECT COUNT(*) INTO times
    FROM Organizacion
    WHERE Organizacion.idUsuarioCreador = userId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function obtenerConsecutivo
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`obtenerConsecutivo`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `obtenerConsecutivo` (userId varchar(45))
RETURNS INT DETERMINISTIC
BEGIN
	DECLARE result INT;
    
	SELECT COUNT(*) INTO result
    FROM Organizacion
    WHERE Organizacion.idUsuarioCreador = userId;
    
    RETURN result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertar_Paises
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`insertar_Paises`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `insertar_Paises` ()
BEGIN

INSERT INTO Pais (nombreP) values ('Colombia');

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertar_Departamentos
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`insertar_Departamentos`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `insertar_Departamentos` ()
BEGIN

INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Amazonas');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Antioquia');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Arauca');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Atlántico');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Bogotá');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Bolívar');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Boyacá');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Caldas');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Caquetá');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Casanare');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Cauca');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Cesar');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Chocó');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Córdoba');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Cundinamarca');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Guainía');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Guaviare');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Huila');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'La Guajira');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Magdalena');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Meta');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Nariño');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Norte de Santander');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Putumayo');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Quindío');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Risaralda');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'San Andrés y Providencia	');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Santander');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Sucre');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Tolima');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Valle del Cauca');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Vaupés');
INSERT INTO Departamento (idPais, nombreDep)
VALUES (1,'Vichada');

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertar_Ciudad
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`insertar_Ciudad`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `insertar_Ciudad` ()
BEGIN
INSERT INTO Ciudad VALUES(1,1,'Leticia');
INSERT INTO Ciudad VALUES(1,2,'Medellín');
INSERT INTO Ciudad VALUES(1,3,'Arauca');
INSERT INTO Ciudad VALUES(1,4,'Barranquilla');
INSERT INTO Ciudad VALUES(1,5,'Bogotá');
INSERT INTO Ciudad VALUES(1,6,'Cartagena de Indias');
INSERT INTO Ciudad VALUES(1,7,'Tunja');
INSERT INTO Ciudad VALUES(1,8,'Manizales');
INSERT INTO Ciudad VALUES(1,9,'Florencia');
INSERT INTO Ciudad VALUES(1,10,'Yopal');
INSERT INTO Ciudad VALUES(1,11,'Popayán');
INSERT INTO Ciudad VALUES(1,12,'Valledupar');
INSERT INTO Ciudad VALUES(1,13,'Quibdó');
INSERT INTO Ciudad VALUES(1,14,'Montería');
INSERT INTO Ciudad VALUES(1,15,'Bogotá');
INSERT INTO Ciudad VALUES(1,16,'Inírida');
INSERT INTO Ciudad VALUES(1,17,'San José del Guaviare');
INSERT INTO Ciudad VALUES(1,18,'Neiva');
INSERT INTO Ciudad VALUES(1,19,'Riohacha');
INSERT INTO Ciudad VALUES(1,20,'Santa Marta');
INSERT INTO Ciudad VALUES(1,21,'Villavicencio');
INSERT INTO Ciudad VALUES(1,22,'Pasto');
INSERT INTO Ciudad VALUES(1,23,'San José de Cúcuta');
INSERT INTO Ciudad VALUES(1,24,'Mocoa');
INSERT INTO Ciudad VALUES(1,25,'Armenia');
INSERT INTO Ciudad VALUES(1,26,'Pereira');
INSERT INTO Ciudad VALUES(1,27,'San Andrés');
INSERT INTO Ciudad VALUES(1,28,'Bucaramanga');
INSERT INTO Ciudad VALUES(1,29,'Sincelejo');
INSERT INTO Ciudad VALUES(1,30,'Ibagué');
INSERT INTO Ciudad VALUES(1,31,'Cali');
INSERT INTO Ciudad VALUES(1,32,'Mitú');
INSERT INTO Ciudad VALUES(1,33,'Puerto Carreño');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertar_Pais_Dep_Ciudad
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`insertar_Pais_Dep_Ciudad`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `insertar_Pais_Dep_Ciudad` ()
BEGIN

CALL insertar_Paises;
CALL insertar_Departamentos;
CALL insertar_Ciudad;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- function obtener_OrgUser_Nombre
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`obtener_OrgUser_Nombre`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `obtener_OrgUser_Nombre` (idOrgU_idUsuario VARCHAR(91))
RETURNS VARCHAR(45)
BEGIN
	
    DECLARE userName VARCHAR(45);

	SELECT Usuario.nombreUsuario INTO userName
	FROM Usuario Inner join OrgUsuario on (OrgUsuario.idUsuario = Usuario.idUsuario)
	WHERE OrgUsuario.idOrgUsuario = idOrgU_idUsuario;
    
    return userName;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerSedes
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`obtenerSedes`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `obtenerSedes` (idOrgCreador VARCHAR(45), idOrgContador INT)
BEGIN
	SELECT * FROM sedes_Org WHERE sedes_Org.idOrgUsuarioCreador = idOrgCreador 
								AND sedes_Org.idOrgContador = idOrgContador;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function insertar_Sede
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`insertar_Sede`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `insertar_Sede` (idOrgUsuarioCreado INT, idOrgContador VARCHAR(45), 
									idDireccionSede VARCHAR(57), idUsuarioEncargado VARCHAR(97), 
                                    nombreSede VARCHAR(45))
RETURNS INT
BEGIN

	#Generaremos el id de la sede
	DECLARE idSede int;
    SET idSede = sedeContador(idOrgUsuarioCreado,idOrgContador) + 1;
    
    INSERT INTO Sede
    VALUES(idSede,idOrgUsuarioCreado,idOrgContador,idDireccionSede,idUsuarioEncargado,nombreSede,now());
    
    RETURN idSede;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function sedeContador
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`sedeContador`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `sedeContador` (idOrgCreador VARCHAR(45),idOrgContador INT)
RETURNS INT
BEGIN
	
    DECLARE Result INT;

	SELECT COUNT(*) INTO Result
    FROM Sede
    WHERE Sede.idOrgUsuarioCreador = idOrgCreador AND 
			Sede.idOrgContador = idOrgContador;
            
	RETURN Result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function insertar_Direccion
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`insertar_Direccion`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `insertar_Direccion` (idCiudad INT, idDepartamento INT, idPais INT,direccion VARCHAR(100))
RETURNS INT
BEGIN
	DECLARE Contador INT;
    
    SELECT COUNT(*) INTO Contador FROM Direccion;
    
	INSERT INTO Direccion
    VALUES (Contador,idCiudad,idDepartamento,idPais,direccion);
    
    RETURN Contador;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerBloques
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`obtenerBloques`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `obtenerBloques` (idOrgCreador VARCHAR(45), idOrgContador INT, idSede INT)
BEGIN
	SELECT * FROM Bloques_Sede_Org WHERE Bloques_Sede_Org.idOrgCreador = idOrgCreador 
									AND Bloques_Sede_Org.idOrgConsecutivo = idOrgContador
                                    AND Bloques_Sede_Org.idSede = idSede;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerNiveles
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`obtenerNiveles`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `obtenerNiveles` (idOrgCreador VARCHAR(45), idOrgContador INT, idSede INT, idBloque INT)
BEGIN
	SELECT * FROM Nivel_Bloques_Sede_Org WHERE Nivel_Bloques_Sede_Org.idOrgCreador = idOrgCreador 
									AND Nivel_Bloques_Sede_Org.idOrgConsecutivo = idOrgContador
                                    AND Nivel_Bloques_Sede_Org.idSede = idSede
                                    AND Nivel_Bloques_Sede_Org.idBloque = idBloque;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function login_Usuario
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`login_Usuario`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `login_Usuario` (idUsuario VARCHAR(45), usuarioClave VARCHAR(25) )
RETURNS BOOLEAN
BEGIN
	
    DECLARE Respuesta BOOLEAN DEFAULT false;

	SELECT true INTO Respuesta
    FROM Usuario
    WHERE Usuario.idUsuario = idUsuario AND Usuario.claveUsuario = usuarioClave;
    
    RETURN Respuesta;
    

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function insertar_Privacidad
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`insertar_Privacidad`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `insertar_Privacidad` (MostrarCorreo BOOL,MostrarOrgPropias BOOL,
										MostrarOrgPertenece BOOL,MostrarRedesSociales BOOL,
                                        MostrarTelefono BOOL)

RETURNS VARCHAR(10)

BEGIN
	DECLARE idPriviacidad VARCHAR(10);
    DECLARE verificarData BOOL DEFAULT False; 
    
    SET idPriviacidad = CONCAT(MostrarCorreo, MostrarOrgPropias, MostrarOrgPertenece,
								MostrarRedesSociales, MostrarTelefono);
    
    
    
	SELECT TRUE INTO verificarData
    FROM PrivacidadUsuario
    WHERE PrivacidadUsuario.idPrivacidadUsuario = idPriviacidad;
    
    IF verificarData = False THEN
		INSERT INTO PrivacidadUsuario VALUES (idPriviacidad,MostrarCorreo, MostrarOrgPropias, MostrarOrgPertenece,
								MostrarRedesSociales, MostrarTelefono);
	END IF;
			
	
    RETURN idPriviacidad;
	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function insertar_RedesSociales
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`insertar_RedesSociales`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `insertar_RedesSociales` (idRedesSociales VARCHAR(91),FaceBook VARCHAR(60),
											Twitter VARCHAR(60),Linkedin VARCHAR(60),
                                            Instagram VARCHAR(60) ,Google VARCHAR(60))
                                            
RETURNS  VARCHAR(91)

BEGIN

	INSERT INTO RedesSociales VALUES (idRedesSociales, FaceBook, Twitter, Linkedin,
										Instagram,Google);
                                        
	RETURN idRedesSociales;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function modificar_RedesSociales
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`modificar_RedesSociales`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `modificar_RedesSociales` (idRedesSociales VARCHAR(91),FaceBook VARCHAR(60),
											Twitter VARCHAR(60),Linkedin VARCHAR(60),
                                            Instagram VARCHAR(60) ,Google VARCHAR(60))
RETURNS  VARCHAR(91)
BEGIN
	
    UPDATE RedesSociales SET RedesSociales.FaceBook = FaceBook , RedesSociales.Twitter = Twitter , 
								RedesSociales.Linkedin = Linkedin , 
								RedesSociales.Instagram = Instagram ,
                                RedesSociales.Google = Google 
						WHERE RedesSociales.idRedesSociales = idRedesSociales;
    

	RETURN idRedesSociales;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function modificar_PrivacidadUsuario
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`modificar_PrivacidadUsuario`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION  `modificar_PrivacidadUsuario` (idPrivacidadUsuario VARCHAR(10),MostrarCorreo BOOL,
										MostrarOrgPropias BOOL, MostrarOrgPertenece BOOL,
										MostrarRedesSociales BOOL,MostrarTelefono BOOL)
                                        
RETURNS VARCHAR(10)
BEGIN

	UPDATE PrivacidadUsuario SET PrivacidadUsuario.MostrarCorreo = MostrarCorreo , 
								PrivacidadUsuario.MostrarOrgPropias = MostrarOrgPropias , 
								PrivacidadUsuario.MostrarOrgPertenece = MostrarOrgPertenece , 
								PrivacidadUsuario.MostrarRedesSociales = MostrarRedesSociales ,
                                PrivacidadUsuario.MostrarTelefono = MostrarTelefono 
						WHERE PrivacidadUsuario.idPrivacidadUsuario = idPrivacidadUsuario;
    

	RETURN idPrivacidadUsuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mostrarPrivacidadU
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`mostrarPrivacidadU`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `mostrarPrivacidadU` (idPrivacidadUsuario VARCHAR(10))
BEGIN

	SELECT *
    FROM PrivacidadUsuario
    WHERE PrivacidadUsuario.idPrivacidadUsuario = idPrivacidadUsuario;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mostrar_RedesSociales
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`mostrar_RedesSociales`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `mostrar_RedesSociales` (idRedesSociales VARCHAR(91))
BEGIN
	SELECT *
    FROM RedesSociales
    WHERE RedesSociales.RedesSociales = RedesSociales;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `SpaceAdmind`.`Pais_Dep_Ciudad`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`Pais_Dep_Ciudad` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`Pais_Dep_Ciudad`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `Pais_Dep_Ciudad` AS

SELECT Pais.nombreP as Pais ,Departamento.nombreDep as Departamento ,Ciudad.nombre as Ciudad
FROM Pais INNER JOIN Departamento on Departamento.idPais = Pais.idPais
INNER JOIN Ciudad on Ciudad.idDepartamento = Departamento.idDepartamento;

-- -----------------------------------------------------
-- View `SpaceAdmind`.`Perfil_Usuario`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`Perfil_Usuario` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`Perfil_Usuario`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `Perfil_Usuario` AS

select Usuario.idUsuario,Usuario.nombreUsuario,Usuario.descripcion,
		Usuario.telefonoCelular,Usuario.correoElectronico,
        Usuario.estadousuario,Usuario.fechaCreacion,
		PrivacidadUsuario.MostrarCorreo,PrivacidadUsuario.MostrarOrgPertenece,
		PrivacidadUsuario.MostrarOrgPropias,PrivacidadUsuario.MostrarRedesSociales,
        PrivacidadUsuario.MostrarTelefono,
        
        RedesSociales.FaceBook,RedesSociales.Twitter,RedesSociales.Linkedin,
        RedesSociales.Instagram,RedesSociales.Google
        
        
from Usuario Inner join PrivacidadUsuario on Usuario.idPrivacidad = PrivacidadUsuario.idPrivacidadUsuario
inner join RedesSociales on RedesSociales.idRedesSociales  = Usuario.idRedesSociales;

-- -----------------------------------------------------
-- View `SpaceAdmind`.`Org_Administradores`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`Org_Administradores` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`Org_Administradores`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `Org_Administradores` AS


select organizacion.idUsuarioCreador as 'Usuario_Creador', 
	organizacion.consecutivoOrg as 'Contador',  
    
    
    (select usuario.nombreUsuario 
    from usuario 
    where usuario.idUsuario = organizacion.idUsuarioCreador ) as Encargado,
    
    
	true as Jefe,true as Sede, true as Bloque, true as Nivel,
    concat( organizacion.idUsuarioCreador + "_$_"+ organizacion.consecutivoOrg + "_#_" + sede.idSede) as 'Identificador'
    
from organizacion inner join sede on sede.idOrgContador = organizacion.consecutivoOrg and sede.idOrgUsuarioCreador = organizacion.idUsuarioCreador

union


select organizacion.idUsuarioCreador as 'Usuario_Creador', 
	organizacion.consecutivoOrg as 'Contador', 
    
    
    (select usuario.nombreUsuario 
		from usuario inner join orgUsuario on usuario.idUsuario = orgUsuario.idusuario 
        where orgUsuario.idOrgUsuario = sede.idUsuarioEncargado) as Encargado,
	
    
    false as Jefe,true as Sede, true as Bloque, true as Nivel,
    concat( organizacion.idUsuarioCreador + "_$_"+ organizacion.consecutivoOrg + "_#_" + sede.idSede) as 'Identificador'
    
from organizacion inner join sede on sede.idOrgContador = organizacion.consecutivoOrg and sede.idOrgUsuarioCreador = organizacion.idUsuarioCreador

union
 
select sede.idOrgUsuarioCreador as 'Usuario_Creador', 
	sede.idOrgContador as 'Contador', 
    
    
    (select usuario.nombreUsuario 
		from usuario inner join orgUsuario on usuario.idUsuario = orgUsuario.idusuario 
        where orgUsuario.idOrgUsuario = bloque.idUsuarioEncargado) as Encargado,
        
        
	false as Jefe,false as Sede, true as Bloque, true as Nivel,
    concat( sede.idOrgUsuarioCreador + "_$_"+ sede.idOrgContador + "_#_" + sede.idSede + "_@_" + bloque.idBloque) as 'Identificador'
    
from sede inner join bloque on sede.idOrgContador = bloque.idOrgConsecutivo and sede.idOrgUsuarioCreador = bloque.idOrgCreador


union 

select bloque.idOrgCreador as 'Usuario_Creador', 
	bloque.idOrgConsecutivo as 'Contador', 
    
    (select usuario.nombreUsuario 
		from usuario inner join orgUsuario on usuario.idUsuario = orgUsuario.idusuario 
        where orgUsuario.idOrgUsuario = nivel.idUsuarioEncargado) as Encargado,
        
        
	false as Jefe , false as Sede, false as Bloque, true as Nivel,
    concat( bloque.idOrgCreador + "_$_"+ bloque.idOrgConsecutivo + "_#_" + bloque.idSede + "_@_" + bloque.idBloque + "_#_" + nivel.idNivel) as 'Identificador'
    
from bloque inner join nivel on bloque.idOrgConsecutivo = nivel.idOrgConsecutivo and bloque.idOrgCreador = nivel.idOrgCreador;

-- -----------------------------------------------------
-- View `SpaceAdmind`.`reservas_Mias`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`reservas_Mias` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`reservas_Mias`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `reservas_Mias` AS

SELECT 

OrgU.idUsuario as 'Usuario_ID',

(SELECT Organizacion.nombre_Org 
	FROM Organizacion 
	WHERE Organizacion.idUsuarioCreador = Re.idOrgCreador
			AND  Organizacion.consecutivoOrg = Re.idOrgConsecutivo) as Organizacion,

(SELECT Sede.nombreSede
	FROM Sede 
	WHERE Sede.idOrgUsuarioCreador = Re.idOrgCreador
			AND  Sede.idOrgContador = Re.idOrgConsecutivo
            AND  Sede.idSede = Re.idSede) as Sede,
     
(SELECT Bloque.nombreBloque
	FROM Bloque 
	WHERE Bloque.idOrgCreador = Re.idOrgCreador
			AND  Bloque.idOrgConsecutivo = Re.idOrgConsecutivo
            AND  Bloque.idSede = Re.idSede
            AND  Bloque.idBloque = Re.idBloque) as Bloque,
            
(SELECT CONCAT('Piso_Numero '+ Nivel.numeroNivel)
	FROM Nivel 
	WHERE Nivel.idOrgCreador = Re.idOrgCreador
			AND  Nivel.idOrgConsecutivo = Re.idOrgConsecutivo
            AND  Nivel.idSede = Re.idSede
            AND  Nivel.idBloque = Re.idBloque
            AND  Nivel.idNivel = Re.idNivel) as Nivel,
            
(SELECT IF(Espacio.nomenclaturaEspecial = Null, CONCAT(IF( Espacio.idEspacio > 10,"0"+Espacio.idEspacio,Espacio.idEspacio)), CONCAT(Espacio.idEspacio + " Conocidco como: " + Espacio.nomenclaturaEspecial))
	FROM Espacio 
	WHERE Espacio.idOrgCreador = Re.idOrgCreador
			AND  Espacio.idOrgContador = Re.idOrgConsecutivo
            AND  Espacio.idSede = Re.idSede
            AND  Espacio.idBloque = Re.idBloque
            AND  Espacio.idNivel = Re.idNivel
            AND  Espacio.idEspacio = Re.idEspacio) as Espacio,

IF(Re.fechaFin >= NOW(),'Activo','Vencido') as Estado


FROM Reserva as Re INNER JOIN OrgUsuario as OrgU on ( Re.idUsuario = OrgU.idOrgUsuario);

-- -----------------------------------------------------
-- View `SpaceAdmind`.`org_Propias`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`org_Propias` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`org_Propias`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `org_Propias` AS

SELECT OrgU.idUsuario, OrgU.nombrePilaUser, OrgU.estadoUsuario as 'Estado_Usuario',
		Org.nombre_Org, Org.estadoOrg as 'Estado_Org'
        
FROM  OrgUsuario as OrgU INNER JOIN Organizacion as Org ON (OrgU.idOrgUsuarioCreador = Org.idUsuarioCreador AND
														OrgU.idOrgContador = Org.consecutivoOrg)
                                                        

WHERE OrgU.idUsuario = OrgU.idOrgusuarioCreador;

-- -----------------------------------------------------
-- View `SpaceAdmind`.`org_pertenece`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`org_pertenece` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`org_pertenece`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `org_pertenece` AS

SELECT OrgU.idUsuario, OrgU.nombrePilaUser, OrgU.estadoUsuario as 'Estado_Usuario',
		Org.nombre_Org, Org.estadoOrg as 'Estado_Org'
        
FROM  OrgUsuario as OrgU INNER JOIN Organizacion as Org ON (OrgU.idOrgUsuarioCreador = Org.idUsuarioCreador AND
														OrgU.idOrgContador = Org.consecutivoOrg)
                                                        
                                                        
WHERE not(OrgU.idUsuario = OrgU.idOrgusuarioCreador);

-- -----------------------------------------------------
-- View `SpaceAdmind`.`mensajes_org`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`mensajes_org` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`mensajes_org`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `mensajes_org` AS


SELECT Mensajes.idMensajes, Mensajes.idOrgCreador, Mensajes.idOrgContador,
		Mensajes.asuntoMensaje,Mensajes.descripcionMensaje,
        obtener_OrgUser_Nombre(Mensajes.usuarioAutor) as autor,
        Mensajes.tipoMensaje, Mensajes.fechaMensaje
        
FROM Mensajes;

-- -----------------------------------------------------
-- View `SpaceAdmind`.`sedes_Org`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`sedes_Org` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`sedes_Org`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `sedes_Org` AS

SELECT Sede.idSede, Sede.idOrgUsuarioCreador, Sede.idOrgContador,
		Sede.nombreSede,
		obtener_OrgUser_Nombre(Sede.idUsuarioEncargado) as 'Encargado',
        Sede.fechaCreacion
        
FROM Sede;

-- -----------------------------------------------------
-- View `SpaceAdmind`.`usuarios_Org`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`usuarios_Org` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`usuarios_Org`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `usuarios_Org` AS 

SELECT OrgU.idOrgUsuario, OrgU.idOrgUsuarioCreador,
		obtener_OrgUser_Nombre(OrgU.idOrgUsuario) as Nombre,
        OrgU.idPermisos,OrgU.nombrePilaUser,OrgU.estadoUsuario,OrgU.fechaEstado
        
FROM OrgUsuario as OrgU;

-- -----------------------------------------------------
-- View `SpaceAdmind`.`Nivel_Bloques_Sede_Org`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`Nivel_Bloques_Sede_Org` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`Nivel_Bloques_Sede_Org`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `Nivel_Bloques_Sede_Org` AS

SELECT Nivel.idNivel, Nivel.idBloque,Nivel.idSede, Nivel.idOrgCreador, 
		Nivel.idOrgConsecutivo,
        Nivel.numeroNivel,
		obtener_OrgUser_Nombre(Nivel.idUsuarioEncargado) as 'Encargado',
        IF(EspaciosPublicos.tieneBanos,'Si', 'No') ,
        IF(EspaciosPublicos.tieneCocineta,'Si', 'No') ,
        IF(EspaciosPublicos.tieneSalaEstar,'Si', 'No') ,
        Nivel.descripcionNivel,Nivel.fechaCreacion
        
        
FROM Nivel INNER JOIN EspaciosPublicos ON (Nivel.idEspacioPublico = EspaciosPublicos.idEspaciosPublcos);

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
