-- MySQL Script generated by MySQL Workbench
-- mar 16 may 2017 17:47:23 COT
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema SpaceAdmind
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `SpaceAdmind` ;

-- -----------------------------------------------------
-- Schema SpaceAdmind
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `SpaceAdmind` DEFAULT CHARACTER SET utf8 ;
USE `SpaceAdmind` ;

-- -----------------------------------------------------
-- Table `SpaceAdmind`.`RedesSociales`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`RedesSociales` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`RedesSociales` (
  `idRedesSociales` VARCHAR(91) NOT NULL,
  `FaceBook` VARCHAR(60) NULL,
  `Twitter` VARCHAR(60) NULL,
  `Linkedin` VARCHAR(60) NULL,
  `Instagram` VARCHAR(60) NULL,
  `Google` VARCHAR(60) NULL,
  PRIMARY KEY (`idRedesSociales`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`PrivacidadUsuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`PrivacidadUsuario` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`PrivacidadUsuario` (
  `idPrivacidadUsuario` VARCHAR(10) NOT NULL COMMENT 'Id = Mc + MorgP + MogrPer + MRedesS + MT\n\nID = GenericT = 11111\n     = GenericF = 00000',
  `MostrarCorreo` TINYINT(1) NOT NULL,
  `MostrarOrgPropias` TINYINT(1) NOT NULL,
  `MostrarOrgPertenece` TINYINT(1) NOT NULL,
  `MostrarRedesSociales` TINYINT(1) NOT NULL,
  `MostrarTelefono` TINYINT(1) NOT NULL,
  PRIMARY KEY (`idPrivacidadUsuario`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Usuario` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Usuario` (
  `idUsuario` VARCHAR(45) NOT NULL COMMENT 'Probando Comentario = Joder',
  `claveUsuario` VARCHAR(25) NOT NULL,
  `nombreUsuario` VARCHAR(100) NOT NULL,
  `descripcion` VARCHAR(230) NULL,
  `telefonoCelular` VARCHAR(25) NULL,
  `correoElectronico` VARCHAR(80) NOT NULL,
  `idRedesSociales` VARCHAR(45) NULL,
  `idPrivacidad` VARCHAR(10) NOT NULL,
  `estadoUsuario` TINYINT(1) NOT NULL,
  `fechaCreacion` TIMESTAMP NOT NULL,
  PRIMARY KEY (`idUsuario`),
  INDEX `idRedesSocialesUsuer_idx` (`idRedesSociales` ASC),
  INDEX `idPrivacidadU_idx` (`idPrivacidad` ASC),
  CONSTRAINT `idRedesSocialesUsuer`
    FOREIGN KEY (`idRedesSociales`)
    REFERENCES `SpaceAdmind`.`RedesSociales` (`idRedesSociales`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idPrivacidadU`
    FOREIGN KEY (`idPrivacidad`)
    REFERENCES `SpaceAdmind`.`PrivacidadUsuario` (`idPrivacidadUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Permisos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Permisos` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Permisos` (
  `idPermisos` VARCHAR(12) NOT NULL,
  `Boss` TINYINT(1) NOT NULL,
  `P_Reserva` TINYINT(1) NOT NULL,
  `P_Nivel` TINYINT(1) NOT NULL,
  `P_Bloque` TINYINT(1) NOT NULL,
  `P_Sede` TINYINT(1) NOT NULL,
  `P_Org` TINYINT(1) NOT NULL,
  `PC_B` TINYINT(1) NOT NULL,
  `PC_S` TINYINT(1) NOT NULL,
  `PC_N` TINYINT(1) NOT NULL,
  `PC_E` TINYINT(1) NOT NULL,
  `P_Encargado` TINYINT(1) NOT NULL,
  PRIMARY KEY (`idPermisos`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Organizacion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Organizacion` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Organizacion` (
  `idUsuarioCreador` VARCHAR(45) NOT NULL,
  `consecutivoOrg` INT(4) NOT NULL,
  `nombre_Org` VARCHAR(100) NOT NULL,
  `descripcion_Org` VARCHAR(140) NULL,
  `idPermisosEstandar` VARCHAR(45) NOT NULL,
  `idRedesSociales` VARCHAR(52) NULL COMMENT 'idRedesSociales = idUsuarioCreador + \'_#_\' + consecutivoOrg',
  `telefonoOrg` VARCHAR(45) NULL,
  `estadoOrg` TINYINT(1) NOT NULL,
  `fechaCreacion` TIMESTAMP NOT NULL,
  `tipoEnroll` VARCHAR(2) NOT NULL,
  `Organizacioncol` VARCHAR(45) NULL,
  PRIMARY KEY (`idUsuarioCreador`, `consecutivoOrg`),
  INDEX `idPermisosEstandar_idx` (`idPermisosEstandar` ASC),
  INDEX `IdRedesSociales_idx` (`idRedesSociales` ASC),
  CONSTRAINT `idPermisosEstandarOrg`
    FOREIGN KEY (`idPermisosEstandar`)
    REFERENCES `SpaceAdmind`.`Permisos` (`idPermisos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `IdRedesSociales`
    FOREIGN KEY (`idRedesSociales`)
    REFERENCES `SpaceAdmind`.`RedesSociales` (`idRedesSociales`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idCreadorUsuario`
    FOREIGN KEY (`idUsuarioCreador`)
    REFERENCES `SpaceAdmind`.`Usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Pais`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Pais` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Pais` (
  `idPais` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idPais`))
ENGINE = InnoDB
AUTO_INCREMENT = 0;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Departamento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Departamento` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Departamento` (
  `idPais` VARCHAR(45) NOT NULL,
  `idDepNombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idPais`, `idDepNombre`),
  CONSTRAINT `idPaisPais`
    FOREIGN KEY (`idPais`)
    REFERENCES `SpaceAdmind`.`Pais` (`idPais`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 0;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Ciudad`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Ciudad` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Ciudad` (
  `idPais` VARCHAR(45) NOT NULL,
  `idDepartamento` VARCHAR(45) NOT NULL,
  `idCiudad` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idPais`, `idDepartamento`, `idCiudad`),
  CONSTRAINT `idDepartamentoCiudad`
    FOREIGN KEY (`idPais` , `idDepartamento`)
    REFERENCES `SpaceAdmind`.`Departamento` (`idPais` , `idDepNombre`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Direccion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Direccion` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Direccion` (
  `idDireccion` INT NOT NULL COMMENT 'ID = idOrgCreador + _$_ + idOrgContador + _#_ + contSede',
  `idPais` VARCHAR(45) NOT NULL,
  `idDepartamento` VARCHAR(45) NOT NULL,
  `idCiudad` VARCHAR(45) NOT NULL,
  `direccion` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`idDireccion`),
  INDEX `idCiudadDireccion_idx` (`idPais` ASC, `idDepartamento` ASC, `idCiudad` ASC),
  CONSTRAINT `idCiudadDireccion`
    FOREIGN KEY (`idPais` , `idDepartamento` , `idCiudad`)
    REFERENCES `SpaceAdmind`.`Ciudad` (`idPais` , `idDepartamento` , `idCiudad`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 0;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`OrgUsuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`OrgUsuario` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`OrgUsuario` (
  `idOrgUsuario` VARCHAR(97) NOT NULL COMMENT 'Pk = idOrgCreador + \'_$_ \' + idContador + \'@\' +idUsuario\n     =       45              +   3    +        3         +   1  +     45\n     =  97\n\nidContador  menor o igul 999',
  `idOrgUsuarioCreador` VARCHAR(45) NOT NULL,
  `idOrgContador` INT(4) NOT NULL,
  `idUsuario` VARCHAR(45) NOT NULL,
  `idPermisos` VARCHAR(12) NULL,
  `nombrePilaUser` VARCHAR(45) NOT NULL,
  `estadoUsuario` VARCHAR(5) NOT NULL,
  `fechaEstado` TIMESTAMP NOT NULL,
  PRIMARY KEY (`idOrgUsuario`),
  INDEX `idUsuario_idx` (`idUsuario` ASC),
  INDEX `idPermiso_idx` (`idPermisos` ASC),
  INDEX `idOrgOrgUsuario_idx` (`idOrgUsuarioCreador` ASC, `idOrgContador` ASC),
  CONSTRAINT `idUsuarioOrgUsuarioJoder`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `SpaceAdmind`.`Usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idOrgGeneral`
    FOREIGN KEY (`idOrgUsuarioCreador` , `idOrgContador`)
    REFERENCES `SpaceAdmind`.`Organizacion` (`idUsuarioCreador` , `consecutivoOrg`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idPermisoOrgUsuarioJoder`
    FOREIGN KEY (`idPermisos`)
    REFERENCES `SpaceAdmind`.`Permisos` (`idPermisos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Sede`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Sede` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Sede` (
  `idSede` INT NOT NULL DEFAULT 0,
  `idOrgUsuarioCreador` VARCHAR(45) NOT NULL,
  `idOrgContador` INT NOT NULL DEFAULT 0,
  `idDireccionSede` INT NULL,
  `idUsuarioEncargado` VARCHAR(97) NOT NULL,
  `nombreSede` VARCHAR(45) NOT NULL,
  `fechaCreacion` TIMESTAMP NOT NULL,
  PRIMARY KEY (`idSede`, `idOrgUsuarioCreador`, `idOrgContador`),
  INDEX `idOrg_idx` (`idOrgUsuarioCreador` ASC, `idOrgContador` ASC),
  INDEX `idDireccion_idx` (`idDireccionSede` ASC),
  INDEX `idUsuarioEncargado_idx` (`idUsuarioEncargado` ASC),
  CONSTRAINT `idSedeOrgUsuarioCreador`
    FOREIGN KEY (`idOrgUsuarioCreador` , `idOrgContador`)
    REFERENCES `SpaceAdmind`.`Organizacion` (`idUsuarioCreador` , `consecutivoOrg`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idSedeDireccion`
    FOREIGN KEY (`idDireccionSede`)
    REFERENCES `SpaceAdmind`.`Direccion` (`idDireccion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idUsuarioEncargado`
    FOREIGN KEY (`idUsuarioEncargado`)
    REFERENCES `SpaceAdmind`.`OrgUsuario` (`idOrgUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Bloque`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Bloque` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Bloque` (
  `idBloque` INT NOT NULL DEFAULT 0,
  `idSede` INT NOT NULL DEFAULT 0,
  `idOrgCreador` VARCHAR(45) NOT NULL,
  `idOrgConsecutivo` INT NOT NULL DEFAULT 0,
  `nombreBloque` VARCHAR(45) NOT NULL,
  `idUsuarioEncargado` VARCHAR(97) NOT NULL,
  `descripcionBloqe` VARCHAR(140) NULL,
  `Estado` VARCHAR(2) NOT NULL,
  `fechaEstado` VARCHAR(45) NOT NULL,
  `fechaCreacion` TIMESTAMP NOT NULL,
  PRIMARY KEY (`idBloque`, `idSede`, `idOrgCreador`, `idOrgConsecutivo`),
  INDEX `idSede_idx` (`idSede` ASC, `idOrgCreador` ASC, `idOrgConsecutivo` ASC),
  INDEX `idBloqueUsuarioEncargado_idx` (`idUsuarioEncargado` ASC),
  CONSTRAINT `idBloqueSedeId`
    FOREIGN KEY (`idSede` , `idOrgCreador` , `idOrgConsecutivo`)
    REFERENCES `SpaceAdmind`.`Sede` (`idSede` , `idOrgUsuarioCreador` , `idOrgContador`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idBloqueUsuarioEncargado`
    FOREIGN KEY (`idUsuarioEncargado`)
    REFERENCES `SpaceAdmind`.`OrgUsuario` (`idOrgUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`EspaciosPublicos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`EspaciosPublicos` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`EspaciosPublicos` (
  `idEspaciosPublcos` VARCHAR(4) NOT NULL,
  `tieneBanos` TINYINT(1) NOT NULL,
  `tieneCocineta` TINYINT(1) NOT NULL,
  `tieneSalaEstar` TINYINT(1) NOT NULL,
  PRIMARY KEY (`idEspaciosPublcos`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Nivel`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Nivel` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Nivel` (
  `idNivel` INT NOT NULL,
  `idBloque` INT NOT NULL,
  `idSede` INT NOT NULL,
  `idOrgCreador` VARCHAR(45) NOT NULL,
  `idOrgConsecutivo` INT NOT NULL,
  `numeroNivel` INT NOT NULL,
  `idUsuarioEncargado` VARCHAR(97) NOT NULL,
  `idEspacioPublico` VARCHAR(4) NOT NULL,
  `descripcionNivel` VARCHAR(140) NULL,
  `fechaCreacion` TIMESTAMP NOT NULL,
  PRIMARY KEY (`idNivel`, `idBloque`, `idSede`, `idOrgCreador`, `idOrgConsecutivo`),
  INDEX `idBloque_idx` (`idBloque` ASC, `idSede` ASC, `idOrgCreador` ASC, `idOrgConsecutivo` ASC),
  INDEX `idEspaciosPublicos_idx` (`idEspacioPublico` ASC),
  INDEX `idUsuario_idx` (`idUsuarioEncargado` ASC),
  CONSTRAINT `idBloqueNivel`
    FOREIGN KEY (`idBloque` , `idSede` , `idOrgCreador` , `idOrgConsecutivo`)
    REFERENCES `SpaceAdmind`.`Bloque` (`idBloque` , `idSede` , `idOrgCreador` , `idOrgConsecutivo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idUsuarioNivel`
    FOREIGN KEY (`idUsuarioEncargado`)
    REFERENCES `SpaceAdmind`.`OrgUsuario` (`idOrgUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idEspaciosPublicosNivel`
    FOREIGN KEY (`idEspacioPublico`)
    REFERENCES `SpaceAdmind`.`EspaciosPublicos` (`idEspaciosPublcos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Espacio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Espacio` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Espacio` (
  `idEspacio` INT NOT NULL,
  `idNivel` INT NOT NULL,
  `idBloque` INT NOT NULL,
  `idSede` INT NOT NULL,
  `idOrgCreador` VARCHAR(45) NOT NULL,
  `idOrgContador` INT NOT NULL,
  `idPermiso` VARCHAR(12) NOT NULL,
  `capacidadEspacio` INT NOT NULL,
  `descripcionEspaco` VARCHAR(140) NULL,
  `nomenclaturaEspecial` VARCHAR(45) NULL,
  `fechaCreacion` TIMESTAMP NOT NULL,
  INDEX `idNivel_idx` (`idNivel` ASC, `idBloque` ASC, `idSede` ASC, `idOrgCreador` ASC, `idOrgContador` ASC),
  INDEX `idPermiso_idx` (`idPermiso` ASC),
  PRIMARY KEY (`idEspacio`, `idNivel`, `idBloque`, `idSede`, `idOrgCreador`, `idOrgContador`),
  CONSTRAINT `idNivelspacio`
    FOREIGN KEY (`idNivel` , `idBloque` , `idSede` , `idOrgCreador` , `idOrgContador`)
    REFERENCES `SpaceAdmind`.`Nivel` (`idNivel` , `idBloque` , `idSede` , `idOrgCreador` , `idOrgConsecutivo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idPermisoEspacio`
    FOREIGN KEY (`idPermiso`)
    REFERENCES `SpaceAdmind`.`Permisos` (`idPermisos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`DiasHabiles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`DiasHabiles` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`DiasHabiles` (
  `idDiasHabiles` VARCHAR(8) NOT NULL,
  `lunes` TINYINT(1) NOT NULL,
  `martes` TINYINT(1) NOT NULL,
  `miercoles` TINYINT(1) NOT NULL,
  `jueves` TINYINT(1) NOT NULL,
  `viernes` TINYINT(1) NOT NULL,
  `sabado` TINYINT(1) NOT NULL,
  `domingo` TINYINT(1) NOT NULL,
  PRIMARY KEY (`idDiasHabiles`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Reserva`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Reserva` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Reserva` (
  `idReserva` INT(8) NOT NULL,
  `idEspacio` INT NOT NULL,
  `idNivel` INT NOT NULL,
  `idBloque` INT NOT NULL,
  `idSede` INT NOT NULL,
  `idOrgCreador` VARCHAR(45) NOT NULL,
  `idOrgConsecutivo` INT(4) NOT NULL,
  `idUsuario` VARCHAR(97) NOT NULL,
  `idDiasReserva` VARCHAR(8) NOT NULL,
  `fechaInicio` DATE NOT NULL,
  `fechaFin` DATE NOT NULL,
  `horaInicio` TIME NOT NULL,
  `horaFin` TIME NOT NULL,
  `fechaReserva` TIMESTAMP NOT NULL,
  PRIMARY KEY (`idReserva`, `idEspacio`, `idNivel`, `idBloque`, `idSede`, `idOrgCreador`, `idOrgConsecutivo`, `idDiasReserva`, `fechaInicio`, `fechaFin`, `horaInicio`, `horaFin`),
  INDEX `idDiasHabiles_idx` (`idDiasReserva` ASC),
  INDEX `idUsuario_idx` (`idUsuario` ASC),
  INDEX `idEspaciosPk_idx` (`idEspacio` ASC, `idNivel` ASC, `idBloque` ASC, `idSede` ASC, `idOrgCreador` ASC, `idOrgConsecutivo` ASC),
  CONSTRAINT `idUsuarioReserva`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `SpaceAdmind`.`OrgUsuario` (`idOrgUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idDiasHabilesReserva`
    FOREIGN KEY (`idDiasReserva`)
    REFERENCES `SpaceAdmind`.`DiasHabiles` (`idDiasHabiles`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idEspaciosPk`
    FOREIGN KEY (`idEspacio` , `idNivel` , `idBloque` , `idSede` , `idOrgCreador` , `idOrgConsecutivo`)
    REFERENCES `SpaceAdmind`.`Espacio` (`idEspacio` , `idNivel` , `idBloque` , `idSede` , `idOrgCreador` , `idOrgContador`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Modificacion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Modificacion` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Modificacion` (
  `idModificacion` INT NOT NULL,
  `TipoModificacion` VARCHAR(45) NOT NULL,
  `ModOrg` VARCHAR(45) NULL,
  `ModSede` INT NULL,
  `ModBloque` INT NULL,
  `ModNivel` INT NULL,
  `ModEspacio` INT NULL,
  `ModUsuarioEnc` VARCHAR(45) NULL,
  `ModOrgCon` INT NULL,
  PRIMARY KEY (`idModificacion`),
  INDEX `ModUsuarioEn_idx` (`ModUsuarioEnc` ASC),
  INDEX `ModOrg_idx` (`ModOrg` ASC, `ModOrgCon` ASC),
  INDEX `ModSede_idx` (`ModSede` ASC),
  INDEX `ModBloque_idx` (`ModBloque` ASC),
  INDEX `ModNivel_idx` (`ModNivel` ASC),
  CONSTRAINT `ModUsuarioEn`
    FOREIGN KEY (`ModUsuarioEnc`)
    REFERENCES `SpaceAdmind`.`Usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ModOrg`
    FOREIGN KEY (`ModOrg` , `ModOrgCon`)
    REFERENCES `SpaceAdmind`.`Organizacion` (`idUsuarioCreador` , `consecutivoOrg`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ModSede`
    FOREIGN KEY (`ModSede`)
    REFERENCES `SpaceAdmind`.`Sede` (`idSede`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ModBloque`
    FOREIGN KEY (`ModBloque`)
    REFERENCES `SpaceAdmind`.`Bloque` (`idBloque`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ModNivel`
    FOREIGN KEY (`ModNivel`)
    REFERENCES `SpaceAdmind`.`Nivel` (`idNivel`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Logs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Logs` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Logs` (
  `idLogs` INT NOT NULL,
  `fechaLog` DATE NOT NULL,
  `usuarioLog` VARCHAR(45) NOT NULL,
  `IdModificacion` INT NOT NULL,
  PRIMARY KEY (`idLogs`),
  INDEX `UsuarioLog_idx` (`usuarioLog` ASC),
  INDEX `ModoficacionId_idx` (`IdModificacion` ASC),
  CONSTRAINT `UsuarioLog`
    FOREIGN KEY (`usuarioLog`)
    REFERENCES `SpaceAdmind`.`Usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ModoficacionId`
    FOREIGN KEY (`IdModificacion`)
    REFERENCES `SpaceAdmind`.`Modificacion` (`idModificacion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`Mensajes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`Mensajes` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Mensajes` (
  `idMensajes` INT NOT NULL,
  `idOrgCreador` VARCHAR(45) NOT NULL,
  `idOrgContador` INT(4) NOT NULL,
  `asuntoMensaje` VARCHAR(45) NOT NULL,
  `descripcionMensaje` VARCHAR(45) NOT NULL,
  `usuarioAutor` VARCHAR(97) NOT NULL,
  `tipoMensaje` VARCHAR(2) NOT NULL,
  `fechaMensaje` TIMESTAMP NOT NULL,
  PRIMARY KEY (`idMensajes`, `idOrgCreador`, `idOrgContador`),
  INDEX `OrgIdMensaje_idx` (`idOrgCreador` ASC, `idOrgContador` ASC),
  INDEX `AutorUsuarioId_idx` (`usuarioAutor` ASC),
  CONSTRAINT `OrgIdMensaje`
    FOREIGN KEY (`idOrgCreador` , `idOrgContador`)
    REFERENCES `SpaceAdmind`.`Organizacion` (`idUsuarioCreador` , `consecutivoOrg`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `AutorUsuarioId`
    FOREIGN KEY (`usuarioAutor`)
    REFERENCES `SpaceAdmind`.`OrgUsuario` (`idOrgUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SpaceAdmind`.`HorarioSede`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SpaceAdmind`.`HorarioSede` ;

CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`HorarioSede` (
  `idDiasHabiles` VARCHAR(8) NOT NULL,
  `idSede` INT NOT NULL,
  `idOrgUsuarioCreador` VARCHAR(45) NOT NULL,
  `idOrgContador` INT NOT NULL,
  `horaApertura` TIME NOT NULL,
  `horaCierre` TIME NOT NULL,
  PRIMARY KEY (`idDiasHabiles`, `idSede`, `idOrgUsuarioCreador`, `idOrgContador`, `horaApertura`, `horaCierre`),
  INDEX `IdDiasHabilesSede_idx` (`idDiasHabiles` ASC),
  INDEX `idSedeHorario_idx` (`idSede` ASC, `idOrgUsuarioCreador` ASC, `idOrgContador` ASC),
  CONSTRAINT `IdDiasHabilesSede`
    FOREIGN KEY (`idDiasHabiles`)
    REFERENCES `SpaceAdmind`.`DiasHabiles` (`idDiasHabiles`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idSedeHorario`
    FOREIGN KEY (`idSede` , `idOrgUsuarioCreador` , `idOrgContador`)
    REFERENCES `SpaceAdmind`.`Sede` (`idSede` , `idOrgUsuarioCreador` , `idOrgContador`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `SpaceAdmind` ;

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`Pais_Dep_Ciudad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Pais_Dep_Ciudad` (`Pais` INT, `Departamento` INT, `Ciudad` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`Perfil_Usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Perfil_Usuario` (`idUsuario` INT, `nombreUsuario` INT, `descripcion` INT, `telefonoCelular` INT, `correoElectronico` INT, `estadousuario` INT, `fechaCreacion` INT, `MostrarCorreo` INT, `MostrarOrgPertenece` INT, `MostrarOrgPropias` INT, `MostrarRedesSociales` INT, `MostrarTelefono` INT, `FaceBook` INT, `Twitter` INT, `Linkedin` INT, `Instagram` INT, `Google` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`Org_Administradores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Org_Administradores` (`'Usuario_Creador'` INT, `'Contador'` INT, `Encargado` INT, `Jefe` INT, `Sede` INT, `Bloque` INT, `Nivel` INT, `'Identificador'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`reservas_Mias`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`reservas_Mias` (`'Usuario_ID'` INT, `Organizacion` INT, `Sede` INT, `Bloque` INT, `Nivel` INT, `Espacio` INT, `Estado` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`org_pertenece`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`org_pertenece` (`idUsuario` INT, `nombrePilaUser` INT, `'Estado_Usuario'` INT, `'Fecha_estado_OrgUser'` INT, `nombre_Org` INT, `'Estado_Org'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`mensajes_org`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`mensajes_org` (`idMensajes` INT, `idOrgCreador` INT, `idOrgContador` INT, `asuntoMensaje` INT, `descripcionMensaje` INT, `autor` INT, `tipoMensaje` INT, `fechaMensaje` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`sedes_Org`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`sedes_Org` (`idSede` INT, `idOrgUsuarioCreador` INT, `idOrgContador` INT, `nombreSede` INT, `'Encargado'` INT, `fechaCreacion` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`usuarios_Org`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`usuarios_Org` (`idOrgUsuario` INT, `idOrgUsuarioCreador` INT, `idOrgContador` INT, `Nombre` INT, `idPermisos` INT, `nombrePilaUser` INT, `estadoUsuario` INT, `fechaEstado` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`Nivel_Bloques_Sede_Org`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`Nivel_Bloques_Sede_Org` (`idNivel` INT, `idBloque` INT, `idSede` INT, `idOrgCreador` INT, `idOrgConsecutivo` INT, `numeroNivel` INT, `'Encargado'` INT, `IF(EspaciosPublicos.tieneBanos,'Si', 'No')` INT, `IF(EspaciosPublicos.tieneCocineta,'Si', 'No')` INT, `IF(EspaciosPublicos.tieneSalaEstar,'Si', 'No')` INT, `descripcionNivel` INT, `fechaCreacion` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`org_info`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`org_info` (`idUsuarioCreador` INT, `consecutivoOrg` INT, `nombre_Org` INT, `descripcion_Org` INT, `idPermisosEstandar` INT, `FaceBook` INT, `Twitter` INT, `Linkedin` INT, `Instagram` INT, `Google` INT, `telefonoOrg` INT, `estadoOrg` INT, `fechaCreacion` INT, `tipoEnroll` INT);

-- -----------------------------------------------------
-- Placeholder table for view `SpaceAdmind`.`espacioXreserva`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SpaceAdmind`.`espacioXreserva` (`idEspacio` INT, `idNivel` INT, `idBloque` INT, `idSede` INT, `idOrgCreador` INT, `idOrgContador` INT, `idReserva` INT, `lunes` INT, `martes` INT, `miercoles` INT, `jueves` INT, `viernes` INT, `sabado` INT, `domingo` INT, `fechaInicio` INT, `fechaFin` INT, `horaInicio` INT, `horaFin` INT);

-- -----------------------------------------------------
-- procedure DataStart
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`DataStart`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `DataStart`()
BEGIN

INSERT INTO PrivacidadUsuario VALUES ('GenericT',1,1,1,1,1);
INSERT INTO PrivacidadUsuario VALUES ('GenericF',0,0,0,0,0);
INSERT INTO RedesSociales VALUES ('GenericNull',null,null,null,null,null);
INSERT INTO Permisos VALUES ('theBoss',1,1,1,1,1,1,1,1,1,1,1);
INSERT INTO Permisos VALUES ('invitado',0,0,0,0,0,0,0,0,0,0,0);
INSERT INTO Permisos VALUES ('solicitante',0,0,0,0,0,0,0,0,0,0,0);

call insertar_Pais_Dep_Ciudad;
select spaceadmond.insertar_Usuario('jquiro12', 'asd123', 'Juan Gon', 'Soltero', '5', '3', NULL, 'GenericF');
select spaceadmind.crear_Organizacion('jquiro12', 'EAFIT', 'La EAFIT', 'invitado', '', '', '', '', '', '4245468', '2');
select spaceadmind.crear_Organizacion('jquiro12', 'EAFIT', 'EAFIT', 'solicitante', NULL, NULL, NULL, NULL,NULL, '45578', '2');

INSERT INTO Sede VALUES
(0,'jquiro12',1,Null,'jquiro12_#_ 1@jquiro12','MEDELLIN',NOW());
INSERT INTO Sede VALUES(1,'jquiro12',1,Null,'jquiro12_#_ 1@jquiro12','MEDELLIN',NOW());

INSERT INTO Bloque VALUES(1,1,'jquiro12',1,'La Esperanza','jquiro12_#_ 1@jquiro12','So Nigga',1,now(),now());

INSERT INTO Espaciospublicos VALUES('111',1,1,1);

INSERT INTO Nivel

VALUES(1,1,1,'jquiro12',1,1,'jquiro12_#_ 1@jquiro12','111','Nothing',now());

INSERT INTO Espacio
VALUES(1,1,1,1,'jquiro12',1,'invitado',5,'Congrat',Null,now());
INSERT INTO Espacio
VALUES(2,1,1,1,'jquiro12',1,'invitado',5,'Congrat',Null,now());
INSERT INTO Espacio
VALUES(3,1,1,1,'jquiro12',1,'invitado',5,'Congrat',Null,now());
INSERT INTO Espacio
VALUES(4,1,1,1,'jquiro12',1,'invitado',5,'Congrat',Null,now());
INSERT INTO Espacio
VALUES(5,1,1,1,'jquiro12',1,'invitado',5,'Congrat',Null,now());

INSERT INTO DiasHabiles

VALUES
('1111100',1,1,1,1,1,0,0);

INSERT INTO Reserva
VALUES
(1,1,1,1,1,'jquiro12',1,'jquiro12_#_ 1@jquiro12','1111100','2017-05-14','2017-05-28','8:00','9:00',now());
INSERT INTO Reserva
VALUES
(2,1,1,1,1,'jquiro12',1,'jquiro12_#_ 1@jquiro12','1111100','2017-05-14','2017-05-28','6:00','7:00',now());
INSERT INTO Reserva
VALUES
(2,1,1,1,1,'jquiro12',1,'jquiro12_#_ 1@jquiro12','1111100','2017-05-14','2017-05-28','18:00','20:00',now());

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure orgsContador
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`orgsContador`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `orgsContador` (in userId varchar(45), inout times int)
BEGIN
	SELECT COUNT(*) INTO times
    FROM Organizacion
    WHERE Organizacion.idUsuarioCreador = userId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function obtenerConsecutivo
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`obtenerConsecutivo`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `obtenerConsecutivo` (userId varchar(45))
RETURNS INT DETERMINISTIC
BEGIN
	DECLARE result INT;
    
	SELECT COUNT(*) INTO result
    FROM Organizacion
    WHERE Organizacion.idUsuarioCreador = userId;
    
    RETURN result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertar_Paises
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`insertar_Paises`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `insertar_Paises` ()
BEGIN

INSERT INTO Pais  values ('Colombia');

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertar_Departamentos
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`insertar_Departamentos`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `insertar_Departamentos` ()
BEGIN

INSERT INTO Departamento 
VALUES ('Colombia','Amazonas');
INSERT INTO Departamento 
VALUES ('Colombia','Antioquia');
INSERT INTO Departamento
VALUES ('Colombia','Arauca');
INSERT INTO Departamento
VALUES ('Colombia','Atlántico');
INSERT INTO Departamento 
VALUES ('Colombia','Bogotá');
INSERT INTO Departamento 
VALUES ('Colombia','Bolívar');
INSERT INTO Departamento 
VALUES ('Colombia','Boyacá');
INSERT INTO Departamento 
VALUES ('Colombia','Caldas');
INSERT INTO Departamento
VALUES ('Colombia','Caquetá');
INSERT INTO Departamento
VALUES ('Colombia','Casanare');
INSERT INTO Departamento 
VALUES ('Colombia','Cauca');
INSERT INTO Departamento 
VALUES ('Colombia','Cesar');
INSERT INTO Departamento
VALUES ('Colombia','Chocó');
INSERT INTO Departamento
VALUES ('Colombia','Córdoba');
INSERT INTO Departamento 
VALUES ('Colombia','Cundinamarca');
INSERT INTO Departamento
VALUES ('Colombia','Guainía');
INSERT INTO Departamento 
VALUES ('Colombia','Guaviare');
INSERT INTO Departamento 
VALUES ('Colombia','Huila');
INSERT INTO Departamento 
VALUES ('Colombia','La Guajira');
INSERT INTO Departamento
VALUES ('Colombia','Magdalena');
INSERT INTO Departamento 
VALUES ('Colombia','Meta');
INSERT INTO Departamento
VALUES ('Colombia','Nariño');
INSERT INTO Departamento 
VALUES ('Colombia','Norte de Santander');
INSERT INTO Departamento 
VALUES ('Colombia','Putumayo');
INSERT INTO Departamento 
VALUES ('Colombia','Quindío');
INSERT INTO Departamento 
VALUES ('Colombia','Risaralda');
INSERT INTO Departamento 
VALUES ('Colombia','San Andrés y Providencia	');
INSERT INTO Departamento 
VALUES ('Colombia','Santander');
INSERT INTO Departamento
VALUES ('Colombia','Sucre');
INSERT INTO Departamento 
VALUES ('Colombia','Tolima');
INSERT INTO Departamento 
VALUES ('Colombia','Valle del Cauca');
INSERT INTO Departamento 
VALUES ('Colombia','Vaupés');
INSERT INTO Departamento 
VALUES ('Colombia','Vichada');

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertar_Ciudad
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`insertar_Ciudad`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `insertar_Ciudad` ()
BEGIN

INSERT INTO Ciudad VALUES('Colombia','Amazonas','Leticia');
INSERT INTO Ciudad VALUES('Colombia','Antioquia','Medellín');
INSERT INTO Ciudad VALUES('Colombia','Arauca','Arauca');
INSERT INTO Ciudad VALUES('Colombia','Atlántico','Barranquilla');
INSERT INTO Ciudad VALUES('Colombia','Bogotá','Bogotá');
INSERT INTO Ciudad VALUES('Colombia','Bolívar','Cartagena de Indias');
INSERT INTO Ciudad VALUES('Colombia','Boyacá','Tunja');
INSERT INTO Ciudad VALUES('Colombia','Caldas','Manizales');
INSERT INTO Ciudad VALUES('Colombia','Caquetá','Florencia');
INSERT INTO Ciudad VALUES('Colombia','Casanare','Yopal');
INSERT INTO Ciudad VALUES('Colombia','Cauca','Popayán');
INSERT INTO Ciudad VALUES('Colombia','Cesar','Valledupar');
INSERT INTO Ciudad VALUES('Colombia','Chocó','Quibdó');
INSERT INTO Ciudad VALUES('Colombia','Córdoba','Montería');
INSERT INTO Ciudad VALUES('Colombia','Cundinamarca','Bogotá');
INSERT INTO Ciudad VALUES('Colombia','Guainía','Inírida');
INSERT INTO Ciudad VALUES('Colombia','Guaviare','San José del Guaviare');
INSERT INTO Ciudad VALUES('Colombia','Huila','Neiva');
INSERT INTO Ciudad VALUES('Colombia','La Guajira','Riohacha');
INSERT INTO Ciudad VALUES('Colombia','Magdalena','Santa Marta');
INSERT INTO Ciudad VALUES('Colombia','Meta','Villavicencio');
INSERT INTO Ciudad VALUES('Colombia','Nariño','Pasto');
INSERT INTO Ciudad VALUES('Colombia','Norte de Santander','San José de Cúcuta');
INSERT INTO Ciudad VALUES('Colombia','Putumayo','Mocoa');
INSERT INTO Ciudad VALUES('Colombia','Quindío','Armenia');
INSERT INTO Ciudad VALUES('Colombia','Risaralda','Pereira');
INSERT INTO Ciudad VALUES('Colombia','San Andrés y Providencia	','San Andrés');
INSERT INTO Ciudad VALUES('Colombia','Santander','Bucaramanga');
INSERT INTO Ciudad VALUES('Colombia','Sucre','Sincelejo');
INSERT INTO Ciudad VALUES('Colombia','Tolima','Ibagué');
INSERT INTO Ciudad VALUES('Colombia','Valle del Cauca','Cali');
INSERT INTO Ciudad VALUES('Colombia','Vaupés','Mitú');
INSERT INTO Ciudad VALUES('Colombia','Vichada','Puerto Carreño');

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertar_Pais_Dep_Ciudad
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`insertar_Pais_Dep_Ciudad`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `insertar_Pais_Dep_Ciudad` ()
BEGIN

CALL insertar_Paises;
CALL insertar_Departamentos;
CALL insertar_Ciudad;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- function obtener_OrgUser_Nombre
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`obtener_OrgUser_Nombre`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `obtener_OrgUser_Nombre` (idOrgU_idUsuario VARCHAR(91))
RETURNS VARCHAR(45)
BEGIN
	
    DECLARE userName VARCHAR(45);

	SELECT Usuario.nombreUsuario INTO userName
	FROM Usuario Inner join OrgUsuario on (OrgUsuario.idUsuario = Usuario.idUsuario)
	WHERE OrgUsuario.idOrgUsuario = idOrgU_idUsuario;
    
    return userName;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerSedes
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`obtenerSedes`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `obtenerSedes` (idOrgCreador VARCHAR(45), idOrgContador INT)
BEGIN
	SELECT * FROM sedes_Org WHERE sedes_Org.idOrgUsuarioCreador = idOrgCreador 
								AND sedes_Org.idOrgContador = idOrgContador;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function insertar_Sede
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`insertar_Sede`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `insertar_Sede` (idSede INT, idOrgUsuarioCreador VARCHAR(45), 
									idOrgContador INT, idDireccionSede INT, 
                                    idUsuarioEncargado INT, nombreSede VARCHAR(45), 
                                    fechaCreacion TIMESTAMP)
BEGIN
	INSERT INTO Sede VALUES(idSede, idOrgUsuarioCreador, idOrgContador, idDireccionSede, 
							idUsuarioEncargado, nombreSede, fechaCreacion);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function sedeContador
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`sedeContador`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `sedeContador` (idOrgCreador VARCHAR(45),idOrgContador INT)
RETURNS INT
BEGIN
	
    DECLARE Result INT;

	SELECT COUNT(*) INTO Result
    FROM Sede
    WHERE Sede.idOrgUsuarioCreador = idOrgCreador AND 
			Sede.idOrgContador = idOrgContador;
            
	RETURN Result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function insertar_Direccion
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`insertar_Direccion`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `insertar_Direccion` (idCiudad INT, idDepartamento INT, idPais INT,direccion VARCHAR(100))
RETURNS INT
BEGIN
	DECLARE Contador INT;
    
    SELECT COUNT(*) INTO Contador FROM Direccion;
    
	INSERT INTO Direccion
    VALUES (Contador,idCiudad,idDepartamento,idPais,direccion);
    
    RETURN Contador;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerBloques
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`obtenerBloques`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `obtenerBloques` (idOrgCreador VARCHAR(45), idOrgContador INT, idSede INT)
BEGIN
	SELECT * FROM Bloques_Sede_Org WHERE Bloques_Sede_Org.idOrgCreador = idOrgCreador 
									AND Bloques_Sede_Org.idOrgConsecutivo = idOrgContador
                                    AND Bloques_Sede_Org.idSede = idSede;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerNiveles
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`obtenerNiveles`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `obtenerNiveles` (idOrgCreador VARCHAR(45), idOrgContador INT, idSede INT, idBloque INT)
BEGIN
	SELECT * FROM Nivel_Bloques_Sede_Org WHERE Nivel_Bloques_Sede_Org.idOrgCreador = idOrgCreador 
									AND Nivel_Bloques_Sede_Org.idOrgConsecutivo = idOrgContador
                                    AND Nivel_Bloques_Sede_Org.idSede = idSede
                                    AND Nivel_Bloques_Sede_Org.idBloque = idBloque;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function login_Usuario
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`login_Usuario`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `login_Usuario` (idUsuario VARCHAR(45), usuarioClave VARCHAR(25) )
RETURNS BOOLEAN
BEGIN
	
    DECLARE Respuesta BOOLEAN DEFAULT false;

	SELECT true INTO Respuesta
    FROM Usuario
    WHERE Usuario.idUsuario = idUsuario AND Usuario.claveUsuario = usuarioClave;
    
    RETURN Respuesta;
    

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function insertar_Privacidad
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`insertar_Privacidad`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `insertar_Privacidad`(MostrarCorreo BOOL,MostrarOrgPropias BOOL,
										MostrarOrgPertenece BOOL,MostrarRedesSociales BOOL,
                                        MostrarTelefono BOOL) RETURNS varchar(10) CHARSET utf8
BEGIN
	DECLARE idPriviacidad VARCHAR(10);
    DECLARE verificarData BOOL DEFAULT False; 
    
    SET idPriviacidad = CONCAT(MostrarCorreo, MostrarOrgPropias, MostrarOrgPertenece,
								MostrarRedesSociales, MostrarTelefono);
    
    
    
	SELECT TRUE INTO verificarData
    FROM PrivacidadUsuario
    WHERE PrivacidadUsuario.idPrivacidadUsuario = idPriviacidad;
    
    IF verificarData = False THEN

		INSERT INTO PrivacidadUsuario VALUES (idPriviacidad,MostrarCorreo, MostrarOrgPropias, MostrarOrgPertenece,
								MostrarRedesSociales, MostrarTelefono);
	END IF;
			
	
    RETURN idPriviacidad;
	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function insertar_RedesSociales
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`insertar_RedesSociales`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `insertar_RedesSociales`(idRedesSociales VARCHAR(91),FaceBook VARCHAR(60),
											Twitter VARCHAR(60),Linkedin VARCHAR(60),
                                            Instagram VARCHAR(60) ,Google VARCHAR(60)) RETURNS varchar(91) CHARSET utf8
BEGIN
	
    IF FaceBook = 'None' THEN SET FaceBook = Null; END IF;
    IF Twitter = 'None' THEN SET Twitter = Null;END IF;
    IF Instagram = 'None' THEN SET Instagram = Null;END IF;
    IF Linkedin = 'None' THEN SET Linkedin = Null;END IF;
    IF Google = 'None' THEN SET Google = Null;END IF;

	INSERT INTO RedesSociales VALUES (idRedesSociales, FaceBook, Twitter, Linkedin,
										Instagram,Google);
                                        
	RETURN idRedesSociales;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function modificar_RedesSociales
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`modificar_RedesSociales`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `modificar_RedesSociales` (idRedesSociales VARCHAR(91),FaceBook VARCHAR(60),
											Twitter VARCHAR(60),Linkedin VARCHAR(60),
                                            Instagram VARCHAR(60) ,Google VARCHAR(60))
RETURNS  VARCHAR(91)
BEGIN
	DECLARE Temp_Redes BOOL DEFAULT FALSE;
    

	#REVISAMOS PRIMERO SI TODO ES NULL

	IF FaceBook = 'None' THEN SET FaceBook = Null; END IF;
    IF Twitter = 'None' THEN SET Twitter = Null; END IF;
    IF Linkedin = 'None' THEN SET Linkedin = Null; END IF;
    IF Instagram = 'None' THEN SET Instagram = Null; END IF;
    IF Google = 'None' THEN SET Google = Null; END IF;
    
    IF IFNULL(FaceBook, True)  AND IFNULL(Twitter, True)  AND IFNULL(Linkedin, True)  AND
		IFNULL(Instagram, True)  AND IFNULL(Google, True)  THEN RETURN 'None'; END IF ;
        
	#DE NO SE TODO NULL VERIFICAMOS PRIMERO QUE EXISTA EL REGISTRO.
    
    
    
    SELECT TRUE INTO Temp_Redes 
				FROM RedesSociales 
                WHERE RedesSociales.idRedesSociales = idRedesSociales;
                
	IF Temp_Redes = TRUE THEN 
	
		UPDATE RedesSociales SET RedesSociales.FaceBook = FaceBook , RedesSociales.Twitter = Twitter , 
								RedesSociales.Linkedin = Linkedin , 
								RedesSociales.Instagram = Instagram ,
                                RedesSociales.Google = Google 
						WHERE RedesSociales.idRedesSociales = idRedesSociales;
                        
		RETURN idRedesSociales;
	ELSE
		SELECT insertar_RedesSociales(idRedesSociales ,FaceBook ,Twitter,Linkedin,
								Instagram ,Google) INTO idRedesSociales;
		
        RETURN idRedesSociales;
        
	END IF;
	

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function modificar_PrivacidadUsuario
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`modificar_PrivacidadUsuario`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION  `modificar_PrivacidadUsuario` (idPrivacidadUsuario VARCHAR(10),MostrarCorreo BOOL,
										MostrarOrgPropias BOOL, MostrarOrgPertenece BOOL,
										MostrarRedesSociales BOOL,MostrarTelefono BOOL)
                                        
RETURNS VARCHAR(10)
BEGIN

	UPDATE PrivacidadUsuario SET PrivacidadUsuario.MostrarCorreo = MostrarCorreo , 
								PrivacidadUsuario.MostrarOrgPropias = MostrarOrgPropias , 
								PrivacidadUsuario.MostrarOrgPertenece = MostrarOrgPertenece , 
								PrivacidadUsuario.MostrarRedesSociales = MostrarRedesSociales ,
                                PrivacidadUsuario.MostrarTelefono = MostrarTelefono 
						WHERE PrivacidadUsuario.idPrivacidadUsuario = idPrivacidadUsuario;
    

	RETURN idPrivacidadUsuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mostrarPrivacidadU
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`mostrarPrivacidadU`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `mostrarPrivacidadU` (idPrivacidadUsuario VARCHAR(10))
BEGIN

	SELECT *
    FROM PrivacidadUsuario
    WHERE PrivacidadUsuario.idPrivacidadUsuario = idPrivacidadUsuario;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mostrar_RedesSociales
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`mostrar_RedesSociales`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `mostrar_RedesSociales` (idRedesSociales VARCHAR(91))
BEGIN
	SELECT *
    FROM RedesSociales
    WHERE RedesSociales.RedesSociales = RedesSociales;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtener_Usuario
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`obtener_Usuario`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `obtener_Usuario` (idUsuario VARCHAR(45))
BEGIN
	SELECT *
    FROM Perfil_Usuario
    WHERE Perfil_Usuario.idUsuario = idUsuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function insertar_Usuario
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`insertar_Usuario`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `insertar_Usuario` (idUsuario VARCHAR(45), claveUsuario VARCHAR(25), nombreUsuario VARCHAR(100),
									descripcion VARCHAR(230), telefonoCelular VARCHAR(25), correoElectronico VARCHAR(80),
                                    idRedesSociales VARCHAR(45),idPrivacidad VARCHAR(10))
RETURNS VARCHAR(45)
BEGIN

	IF descripcion = 'None' THEN SET descripcion = 	Null; END IF;
    IF telefonoCelular = 'None' THEN SET telefonoCelular = 	Null; END IF;
    IF idRedesSociales = 'None' THEN SET idRedesSociales = 	Null; END IF;
    
    INSERT INTO Usuario VALUES (idUsuario,claveUsuario,nombreUsuario,descripcion,telefonoCelular,
								correoElectronico,idRedesSociales,idPrivacidad,1,NOW());
                                
	RETURN idUsuario;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizar_User_Basicos
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`actualizar_User_Basicos`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `actualizar_User_Basicos` ( idUsuario VARCHAR(45),nombreUsuario VARCHAR(100),
											descripcion VARCHAR(230), telefonoCelular VARCHAR(25),
                                            correoElectronico VARCHAR(80))

BEGIN
	 UPDATE Usuario SET Usuario.nombreUsuario = nombreUsuario ,
								Usuario.descripcion = descripcion , 
								Usuario.correoElectronico = correoElectronico,
                                Usuario.telefonoCelular = telefonoCelular
						WHERE Usuario.idUsuario = idUsuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizar_User_RedesSociales
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`actualizar_User_RedesSociales`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `actualizar_User_RedesSociales`(idUsuario VARCHAR(45),
													FaceBook VARCHAR(60),Twitter VARCHAR(60),
                                                    Linkedin VARCHAR(60),Instagram VARCHAR(60),
                                                    Google VARCHAR(60))
BEGIN
	DECLARE idRedesSociales VARCHAR(45);
    
	IF FaceBook = 'None' AND Twitter = 'None' AND Linkedin = 'None' AND Instagram = 'None' AND Google = 'None'THEN 
		SET idRedesSociales = Null;
    ELSE 
		SET idRedesSociales = modificar_RedesSociales(idUsuario,FaceBook, Twitter ,
                                                    Linkedin ,Instagram,Google);
    END IF;
        
        
	UPDATE Usuario SET Usuario.idRedesSociales = idRedesSociales
					WHERE Usuario.idUsuario = idUsuario;
       
    

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizar_User_Privacidad
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`actualizar_User_Privacidad`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `actualizar_User_Privacidad` (idUsuario VARCHAR(45), MostrarCorreo BOOL,
										MostrarOrgPropias BOOL,MostrarOrgPertenece BOOL,
										MostrarRedesSociales BOOL,MostrarTelefono BOOL)
                                        
BEGIN

	DECLARE idPrivacidad VARCHAR(10);
    SET idPrivacidad = CONCAT(MostrarCorreo ,MostrarOrgPropias ,MostrarOrgPertenece ,
								MostrarRedesSociales ,MostrarTelefono );
                                
	UPDATE Usuario SET Usuario.idPrivacidad = idPrivacidad 
					WHERE  Usuario.idUsuario = idUsuario;
										
										

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mostrar_privacidad
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`mostrar_privacidad`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `mostrar_privacidad` (idPrivacidadUsuario VARCHAR(10))
BEGIN

	SELECT * FROM PrivacidadUsuario
    WHERE PrivacidadUsuario.idPrivacidadUsuario = idPrivacidadUsuario;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizar_estado_Usuario
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`actualizar_estado_Usuario`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `actualizar_estado_Usuario` (idUsuario VARCHAR(45), estadoUsuario BOOL)
BEGIN

	UPDATE Usuario SET Usuario.estadoUsuario = estadoUsuario, Usuario.fechaEstado = NOW()
    WHERE Usuario.idUsuario = idUsuario;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function crear_Organizacion
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`crear_Organizacion`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `crear_Organizacion` (idUsuarioCreador VARCHAR(45), nombre_Org VARCHAR(100),
										descripcion_Org VARCHAR(140), idPermisosEstandar VARCHAR(45), 
                                        
                                        FaceBook VARCHAR(60), Twitter VARCHAR(60),
                                        Linkedin VARCHAR(60), Instagram VARCHAR(60), 
                                        Google VARCHAR(60), 
                                        
                                        telefonoOrg VARCHAR(45), tipoEnroll VARCHAR(2))

RETURNS INT
BEGIN
	
    #DECLARAMOS VARIABLES
	DECLARE orgConsecutivo INT;
    DECLARE idRedesSociales VARCHAR(52);
    
    #OBTENEMOS EL CONSECUTIVO DE LA ORG Y LA AUMENTAMOS PARA LA NUEVA
    
	SELECT obtenerConsecutivo(idUsuarioCreador) + 1 INTO orgConsecutivo;

	#INSERTAREMOS LAS REDES SOCIALES
    
    
    SET idRedesSociales = CONCAT(idUsuarioCreador , '_#_', orgConsecutivo);
    
    SELECT insertar_RedesSociales(idRedesSociales ,FaceBook ,Twitter ,Linkedin ,
                                            Instagram ,Google) INTO idRedesSociales;
    
    
    
    
	#INSERTAREREMOS LA ORG.
    
    
    IF idRedesSociales = 'None' THEN SET idRedesSociales = Null; END IF;
    IF descripcion_Org = 'None' THEN SET descripcion_Org = Null; END IF;
    IF telefonoOrg = 'None' THEN SET telefonoOrg = Null; END IF;
    
    
    
    
    INSERT INTO Organizacion VALUES(idUsuarioCreador , orgConsecutivo ,
									nombre_Org, descripcion_Org,
                                    idPermisosEstandar, idRedesSociales,
                                    telefonoOrg, 1, NOW(), tipoEnroll);
                                    
	RETURN orgConsecutivo;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editar_Organizacion_Basico
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`editar_Organizacion_Basico`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `editar_Organizacion_Basico` (IN idUsuarioCreador VARCHAR(45), IN consecutivoOrg INT(4),
												IN nombre_Org VARCHAR(100),IN descripcion_Org VARCHAR(140),
												IN telefonoOrg VARCHAR(45))

BEGIN

	IF descripcion_Org = 'None' THEN SET descripcion_Org = Null; END IF;
    IF telefonoOrg = 'None' THEN SET telefonoOrg = Null; END IF;
    
    UPDATE Organizacion SET Organizacion.nombre_Org = nombre_Org, 
							Organizacion.descripcion_Org= descripcion_Org,
							Organizacion.telefonoOrg = telefonoOrg
                            
						WHERE Organizacion.idUsuarioCreador = idUsuarioCreador AND
								Organizacion.consecutivoOrg = consecutivoOrg;
								

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editar_Organizacion_RedesSociales
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`editar_Organizacion_RedesSociales`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `editar_Organizacion_RedesSociales`(IN idUsuarioCreador VARCHAR(45), IN consecutivoOrg INT(4),
													
													FaceBook VARCHAR(60), Twitter VARCHAR(60),
													Linkedin VARCHAR(60), Instagram VARCHAR(60), 
													Google VARCHAR(60))

BEGIN
	
    DECLARE idRedesSociales VARCHAR(52) DEFAULT CONCAT(idUsuarioCreador, '_#_',consecutivoOrg);
    
    SELECT modificar_RedesSociales (idRedesSociales,FaceBook,Twitter ,Linkedin ,
									Instagram  ,Google )
                                    
                                    INTO idRedesSociales;
   

    IF idRedesSociales = 'None' THEN SET idRedesSociales = Null; END IF;     

    UPDATE Organizacion SET Organizacion.idRedesSociales = idRedesSociales
                            
						WHERE Organizacion.idUsuarioCreador = idUsuarioCreador AND
								Organizacion.consecutivoOrg = consecutivoOrg;
								

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editar_Organizacion_PermisosEstandar
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`editar_Organizacion_PermisosEstandar`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `editar_Organizacion_PermisosEstandar`(IN idUsuarioCreador VARCHAR(45), 
														IN consecutivoOrg INT(4),
                                                        IN idPermisosEstandar VARCHAR(45))
								
BEGIN
	

    UPDATE Organizacion SET Organizacion.idPermisosEstandar = idPermisosEstandar
                            
						WHERE Organizacion.idUsuarioCreador = idUsuarioCreador AND
								Organizacion.consecutivoOrg = consecutivoOrg;
								

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editar_Organizacion_TipoEnrroll
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`editar_Organizacion_TipoEnrroll`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `editar_Organizacion_TipoEnrroll`(IN idUsuarioCreador VARCHAR(45), 
													IN consecutivoOrg INT(4),
													IN tipoEnroll VARCHAR(2))
								
BEGIN
	

    UPDATE Organizacion SET Organizacion.tipoEnroll = tipoEnroll
                            
						WHERE Organizacion.idUsuarioCreador = idUsuarioCreador AND
								Organizacion.consecutivoOrg = consecutivoOrg;
								

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure consultar_Org
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`consultar_Org`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `consultar_Org` (idUsuarioCreador VARCHAR(45) , consecutivoOrg INT(4))
BEGIN

	SELECT * 
    FROM  org_info 
    WHERE org_info.idUsuarioCreador = idUsuarioCreador AND org_info.consecutivoOrg = consecutivoOrg;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure listar_OrgPropias
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`listar_OrgPropias`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `listar_OrgPropias` (idUsuarioCreador VARCHAR(45))
BEGIN
	SELECT * FROM Organizacion WHERE Organizacion.idUsuarioCreador = idUsuarioCreador;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function asociar_OrgUsuario
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP function IF EXISTS `SpaceAdmind`.`asociar_OrgUsuario`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE FUNCTION `asociar_OrgUsuario` (idOrgUsuarioCreador VARCHAR(45), idOrgContador INT(4),
										idUsuario VARCHAR(45), idPermisos VARCHAR(12),
                                        nombrePilaUser VARCHAR(45), estadoUsuario VARCHAR(5))

RETURNS VARCHAR(97)
BEGIN

	DECLARE idOrgUsuario VARCHAR(97) DEFAULT 
		CONCAT( idOrgUsuarioCreador, '_#_ ', idOrgContador ,'@' ,idUsuario);
        
        
	
    INSERT INTO OrgUsuario VALUES (idOrgUsuario,idOrgUsuarioCreador,idOrgContador,idUsuario,
							idPermisos,nombrePilaUser, estadoUsuario, NOW());
                            
	RETURN idOrgUsuario;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure invitar_OrgUsuario
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`invitar_OrgUsuario`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `invitar_OrgUsuario` (IN idOrgUsuarioCreador VARCHAR(45), IN idOrgContador INT(4),
										IN idUsuario VARCHAR(45))
BEGIN

	DECLARE idOrgUser VARCHAR(97);
    
	SET idOrgUser = asociar_OrgUsuario(idOrgUsuarioCreador,idOrgContador,idUsuario, 
										Null,idUsuario, 3);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure solicitar_OrgUsuario
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`solicitar_OrgUsuario`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `solicitar_OrgUsuario` (IN idOrgUsuarioCreador VARCHAR(45), IN idOrgContador INT(4),
										IN idUsuario VARCHAR(45))
BEGIN

	DECLARE idOrgUser VARCHAR(97);
    
	SET idOrgUser = asociar_OrgUsuario(idOrgUsuarioCreador,idOrgContador,idUsuario, 
										Null,idUsuario, 5);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cambiar_estado_OrgU
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`cambiar_estado_OrgU`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `cambiar_estado_OrgU` (IN idOrgUsuario VARCHAR(45),IN estadoUsuario VARCHAR(5))
BEGIN
    
	UPDATE OrgUsuario SET OrgUsuario.estadoUsuario = estadoUsuario, OrgUsuario.fechaEstado = NOW()
					WHERE OrgUsuario.idOrgUsuario= idOrgUsuario;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure rechazar_OrgUsuario
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`rechazar_OrgUsuario`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `rechazar_OrgUsuario` (IN idOrgUsuario VARCHAR(45))
BEGIN
	CALL cambiar_estado_OrgU(idOrgUsuario ,1);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure rechazar_Inv_OrgUsuario
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`rechazar_Inv_OrgUsuario`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `rechazar_Inv_OrgUsuario` (IN idOrgUsuario VARCHAR(45))
BEGIN
	CALL cambiar_estado_OrgU(idOrgUsuario ,4);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure accpetar_OrgUsuario_FINO
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`accpetar_OrgUsuario_FINO`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `accpetar_OrgUsuario_FINO` (IN idOrgUsuarioCreador VARCHAR(45), IN idOrgContador INT(4),
										in nombrePilaUser VARCHAR(45), IN idOrgUsuario VARCHAR(45))
BEGIN
                    
	
	DECLARE idPermisos VARCHAR(12);
    
	SELECT OrgUsuario.idPermisos INTO idPermisos
	FROM OrgUsuario
	WHERE OrgUsuario.idOrgUsuarioCreador = idOrgUsuarioCreador 
		AND OrgUsuario.idOrgContador = idOrgContador;
            
            
	UPDATE OrgUsuario SET OrgUsuario.idPermisos = idPermisos,
							OrgUsuario.nombrePilaUser = nombrePilaUser,
							OrgUsuario.estadoUsuario = 0, 
							OrgUsuario.fechaEstado = NOW()
						WHERE OrgUsuario.idOrgUsuario= idOrgUsuario;
        
        
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure desterrar_OrgUsuario
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`desterrar_OrgUsuario`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `desterrar_OrgUsuario` (IN idOrgUsuario VARCHAR(45))
BEGIN
	CALL cambiar_estado_OrgU(idOrgUsuario ,6);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure banear_OrgUsuario
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`banear_OrgUsuario`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `banear_OrgUsuario` (IN idOrgUsuario VARCHAR(45))
BEGIN
	CALL cambiar_estado_OrgU(idOrgUsuario ,7);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure modoficar_nombrep_OrgUser
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`modoficar_nombrep_OrgUser`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `modoficar_nombrep_OrgUser` (idOrgUsuario VARCHAR(45),nombrePilaUser VARCHAR(45))
BEGIN
	
    UPDATE OrgUsuario SET OrgUsuario.nombrePilaUser = nombrePilaUser
						WHERE OrgUsuario.idOrgUsuario = idOrgUsuario;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure modoficar_Permisos_OrgUser
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`modoficar_Permisos_OrgUser`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `modoficar_Permisos_OrgUser` (idOrgUsuario VARCHAR(45),idPermisos VARCHAR(12))
BEGIN
	
    UPDATE OrgUsuario SET OrgUsuario.idPermisos = idPermisos
						WHERE OrgUsuario.idOrgUsuario = idOrgUsuario;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure listar_OrgUser
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`listar_OrgUser`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `listar_OrgUser` (idOrgUsuarioCreador VARCHAR(45), idOrgContador INT)
BEGIN
	SELECT * 
    FROM usuarios_Org 
    WHERE usuarios_Org.idOrgUsuarioCreador = idOrgUsuarioCreador 
		AND usuarios_Org.idOrgContador = idOrgContador;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure espaciosXOrgSede
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`espaciosXOrgSede`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `espaciosXOrgSede` (idOrgCreador VARCHAR(45), idOrgContador INT,
									idSede INT)

BEGIN
                                    
	SELECT *
    FROM Espacio
    WHERE Espacio.idOrgCreador = idOrgCreador AND
			Espacio.idOrgContador = idOrgContador AND
            Espacio.idSede = idSede;
                                    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure reservar_rango
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`reservar_rango`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `reservar_rango` (idOrgCreador VARCHAR(45),idOrgConsecutivo INT ,
									idSede INT,fechaInicio DATE,
                                    fechaFin DATE, horaInicio TIME,  horaFin TIME,
                                    lunes BOOL, martes BOOL, miercoles BOOL,
                                    jueves BOOL, viernes BOOL, sabado BOOL,
                                    domingo BOOL)
BEGIN

	#Sacamos todos los ocupados
	
	SELECT * FROM espacioXreserva AS ER
    WHERE  
    
IF(lunes = TRUE,
	IF(ER.lunes = TRUE,
		IF((horaInicio > ER.horaInicio AND horaInicio < ER.horaFin) OR (horaFin > ER.horaInicio AND horaFin < ER.horaFin), 
			TRUE, 
		FALSE) ,
	FALSE),
FALSE)

 AND
 IF(martes = TRUE,
	IF(ER.martes = TRUE,
		IF((horaInicio > ER.horaInicio AND horaInicio < ER.horaFin) OR (horaFin > ER.horaInicio AND horaFin < ER.horaFin), 
			TRUE, 
		FALSE) ,
	FALSE),
FALSE)

 AND
 IF(miercoles = TRUE,
	IF(ER.miercoles = TRUE,
		IF((horaInicio > ER.horaInicio AND horaInicio < ER.horaFin) OR (horaFin > ER.horaInicio AND horaFin < ER.horaFin), 
			TRUE, 
		FALSE) ,
	FALSE),
FALSE)

 AND
 IF(jueves = TRUE,
	IF(ER.jueves = TRUE,
		IF((horaInicio > ER.horaInicio AND horaInicio < ER.horaFin) OR (horaFin > ER.horaInicio AND horaFin < ER.horaFin), 
			TRUE, 
		FALSE) ,
	FALSE),
FALSE)

 AND
 IF(viernes = TRUE,
	IF(ER.viernes = TRUE,
		IF((horaInicio > ER.horaInicio AND horaInicio < ER.horaFin) OR (horaFin > ER.horaInicio AND horaFin < ER.horaFin), 
			TRUE, 
		FALSE) ,
	FALSE),
FALSE)

 AND
 IF(sabado = TRUE,
	IF(ER.sabado = TRUE,
		IF((horaInicio > ER.horaInicio AND horaInicio < ER.horaFin) OR (horaFin > ER.horaInicio AND horaFin < ER.horaFin), 
			TRUE, 
		FALSE) ,
	FALSE),
FALSE)

 AND
 IF(domingo = TRUE,
	IF(ER.domingo = TRUE,
		IF((horaInicio > ER.horaInicio AND horaInicio < ER.horaFin) OR (horaFin > ER.horaInicio AND horaFin < ER.horaFin), 
			TRUE, 
		FALSE) ,
	FALSE),
FALSE)

 AND
 
 ER.fechaInicio < fechaInicio AND ER.fechaFin > fechaFin;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure espaciosXReservas_Org
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`espaciosXReservas_Org`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `espaciosXReservas_Org` (idOrgCreador VARCHAR(45),idOrgContador INT,idSede INT)
BEGIN
	SELECT *
    FROM espacioXreserva
    WHERE espacioXreserva.idSede = idSede AND 
		espacioXreserva.idOrgCreador = idOrgCreador AND 
        espacioXreserva.idOrgContador = idOrgContador;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertar_Sede
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`insertar_Sede`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `insertar_Sede` (idSede INT, idOrgUsuarioCreador VARCHAR(45), 
									idOrgContador INT, idDireccionSede INT, 
                                    idUsuarioEncargado INT, nombreSede VARCHAR(45), 
                                    fechaCreacion TIMESTAMP)
BEGIN
	INSERT INTO Sede VALUES(idSede, idOrgUsuarioCreador, idOrgContador, idDireccionSede, 
							idUsuarioEncargado, nombreSede, fechaCreacion);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertar_Bloque
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`insertar_Bloque`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `insertar_Bloque` (idBloque INT, idSede INT, idOrgCreador VARCHAR(45), 
									idOrgConsecutivo INT, nombreBloque VARCHAR(45), 
                                    idUsuarioEncargado VARCHAR(97), descripcionBloqe VARCHAR(140),
                                    Estado VARCHAR(2), fechaEstado VARCHAR(45), 
                                    fechaCreacion TIMESTAMP)
BEGIN
	INSERT INTO Bloque VALUES (idBloque, idSede, idOrgCreador, idOrgConsecutivo, nombreBloque, 
						idUsuarioEncargado, descripcionBloqe, Estado , fechaEstado, 
                        fechaCreacion);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertar_Nivel
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`insertar_Nivel`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `insertar_Nivel` (idNivel INT, idBloque INT, idSede INT, idOrgCreador VARCHAR(45),
									idOrgConsecutivo INT, numeroNivel INT, 
                                    idUsuarioEncargado VARCHAR(97), idEspacioPublico VARCHAR(4), 
                                    descripcionNivel VARCHAR(140), fechaCreacion TIMESTAMP)
BEGIN
	INSERT INTO Nivel  VALUES (idNivel, idBloque, idSede, idOrgCreador, idOrgConsecutivo, 
								numeroNivel, idUsuarioEncargado, idEspacioPublico, 
                                descripcionNivel, fechaCreacion);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertar_Espacio
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`insertar_Espacio`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `insertar_Espacio` (idEspacio INT, idNivel INT, idBloque INT, idSede INT, 
									idOrgCreador VARCHAR(45), idOrgContador INT, 
                                    idPermiso VARCHAR(12), capacidadEspacio INT, 
                                    descripcionEspaco VARCHAR(140), nomenclaturaEspecial VARCHAR(45),
                                    fechaCreacion TIMESTAMP)
BEGIN
	INSERT INTO Espacio VALUES (idEspacio, idNivel, idBloque, idSede, idOrgCreador, idOrgContador, idPermiso, capacidadEspacio, descripcionEspaco, nomenclaturaEspecial, fechaCreacion);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure modificar_Sede
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`modificar_Sede`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `modificar_Sede` (IN idSede INT, IN idOrgUsuarioCreador VARCHAR(45), 
									IN idOrgContador INT, IN idDireccionSede INT, 
                                    IN idUsuarioEncargado INT, IN nombreSede VARCHAR(45), 
                                    IN fechaCreacion TIMESTAMP)
BEGIN

	UPDATE Sede SET Sede.idSede = idSede, Sede.idOrgUsuarioCreador = idOrgUsuarioCreador, 
					Sede.idOrgContador = idOrgContador, Sede.idDireccionSede = idDireccionSede, 
					Sede.idUsuarioEncargado = idUsuarioEncargado, Sede.nombreSede = nombreSede, 
					Sede.fechaCreacion = fechaCreacion
				WHERE Sede.idSede = idSede AND Sede.idUsuarioCreador = idUsuarioCreador 
											AND Sede.idOrgContador = idOrgContador;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure modificar_Bloque
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`modificar_Bloque`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `modificar_Bloque` (idBloque INT, idSede INT, idOrgCreador VARCHAR(45), 
									idOrgConsecutivo INT, nombreBloque VARCHAR(45), 
                                    idUsuarioEncargado VARCHAR(97), descripcionBloqe VARCHAR(140),
                                    Estado VARCHAR(2), fechaEstado VARCHAR(45), 
                                    fechaCreacion TIMESTAMP)
BEGIN
	UPDATE Bloque SET Bloque.idBloque = idBloque, Bloque.idSede = idSede, Bloque.idOrgCreador = idOrgCreador, 
					  Bloque.idOrgConsecutivo = idOrgConsecutivo, Bloque.nombreBloque = nombreBloque, 
						Bloque.idUsuarioEncargado = idUsuarioEncargado, Bloque.descripcionBloqe = descripcionBloqe, 
						Bloque.Estado = Estado, Bloque.fechaEstado = fechaEstado, Bloque.fechaCreacion = fechaCreacion

					WHERE Bloque.idBloque = idBloque AND idBloque.idSede = idSede AND Bloque.idOrgCreador = idOrgCreador
											AND idBloque.idOrgConsecutivo = idOrgConsecutivo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure modificar_Nivel
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`modificar_Nivel`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `modificar_Nivel` (idNivel INT, idBloque INT, idSede INT, idOrgCreador VARCHAR(45),
									idOrgConsecutivo INT, numeroNivel INT, 
                                    idUsuarioEncargado VARCHAR(97), idEspacioPublico VARCHAR(4), 
                                    descripcionNivel VARCHAR(140), fechaCreacion TIMESTAMP)
BEGIN
	UPDATE Nivel SET 	Nivel.idNivel = idNivel, Nivel.idBloque = idBloque, Nivel.idSede = idSede, 
						Nivel.idOrgCreador = idOrgCreador, Nivel.idOrgConsecutivo = idOrgConsecutivo, 
						Nivel.numeroNivel = numeroNivel, Nivel.idUsuarioEncargado = idUsuarioEncargado, 
						Nivel.idEspacioPublico = idEspacioPublico, Nivel.descripcionNivel = descripcionNivel, 
						Nivel.fechaCreacion = fechaCreacion

				WHERE Nivel.idNivel = idNivel AND Nivel.idSede = idSede AND Nivel.idBloque = idBloque
												AND Nivel.idOrgCreador = idOrgCreador 
												AND Nivel.idOrgConsecutivo = idOrgConsecutivo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure modificar_Espacio
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`modificar_Espacio`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `modificar_Espacio` (idEspacio INT, idNivel INT, idBloque INT, idSede INT, 
									idOrgCreador VARCHAR(45), idOrgContador INT, 
                                    idPermiso VARCHAR(12), capacidadEspacio INT, 
                                    descripcionEspaco VARCHAR(140), nomenclaturaEspecial VARCHAR(45),
                                    fechaCreacion TIMESTAMP)
BEGIN
	UPDATE Espacio SET Espacio.idEspacio = idEspacio, Espacio.idNivel = idNivel, Espacio.idBloque = idBloque, 
						Espacio.idSede = idSede, Espacio.idOrgCreador = idOrgCreador, Espacio.idOrgContador = idOrgContador,
						 Espacio.idPermiso = idPermiso, Espacio.capacidadEspacio = capacidadEspacio, Espacio.descripcionEspaco = descripcionEspaco,
						 	Espacio.nomenclaturaEspecial = nomenclaturaEspecial, Espacio.fechaCreacion = fechaCreacion
					WHERE Espacio.idEspacio = idEspacio AND Espacio.idNivel = idNivel AND Espacio.idBloque = idBloque
														AND Espacio.idSede = idSede AND Espacio.idOrgCreador = idUsuarioCreador
														AND Espacio.idOrgContador = idOrgContador;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertar_Organizacion
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`insertar_Organizacion`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `insertar_Organizacion` (idUsuarioCreador VARCHAR(45), nombre_Org VARCHAR(100),
										descripcion_Org VARCHAR(140), 

                                        Boss BOOLEAN, P_Reserva BOOLEAN, P_Nivel BOOLEAN, 
                                        P_Bloque BOOLEAN, P_Sede BOOLEAN, P_Org BOOLEAN,  

                                        FaceBook VARCHAR(60), Twitter VARCHAR(60),
                                        Linkedin VARCHAR(60), Instagram VARCHAR(60), 
                                        Google VARCHAR(60), 
                                        
                                        telefonoOrg VARCHAR(45), tipoEnroll VARCHAR(2))
BEGIN
    DECLARE orgConsecutivo INT;
    DECLARE idRedesSociales VARCHAR(52);
    DECLARE idPermisosEstandar VARCHAR(12);

    #OBTENEMOS EL CONSECUTIVO DE LA ORG Y LA AUMENTAMOS PARA LA NUEVA
    
	SELECT obtenerConsecutivo(idUsuarioCreador) + 1 INTO orgConsecutivo;

	#INSERTAREMOS LAS REDES SOCIALES
    
    SET idRedesSociales = CONCAT(idUsuarioCreador , '_#_', orgConsecutivo);
    
    SET idPermisosEstandar = CONCAT(Boss, P_Reserva, P_Nivel, 
                                    P_Bloque, P_Sede, P_Org, 0, 0, 0, 0, 0);
    
    SELECT insertar_RedesSociales(idRedesSociales ,FaceBook ,Twitter ,Linkedin ,
                                            Instagram ,Google) INTO idRedesSociales;

    CALL insert_Permisos (idPermisosEstandar, Boss, P_Reserva, P_Nivel, P_Bloque,
                            P_Sede, P_Org); 
    
	#INSERTAREREMOS LA ORG.
    
    IF idRedesSociales = 'None' THEN SET idRedesSociales = Null; END IF;
    IF descripcion_Org = 'None' THEN SET descripcion_Org = Null; END IF;
    IF telefonoOrg = 'None' THEN SET telefonoOrg = Null; END IF;
    
    
    
    
    INSERT INTO Organizacion VALUES(
        idUsuarioCreador, orgConsecutivo,
		nombre_Org, descripcion_Org,
		idPermisosEstandar, idRedesSociales,
		telefonoOrg, TRUE, NOW(), tipoEnroll);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insert_Permisos
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`insert_Permisos`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `insert_Permisos` (idPermisos VARCHAR(12), 
									Boss BOOLEAN, P_Reserva BOOLEAN, P_Nivel BOOLEAN, 
                                        P_Bloque BOOLEAN, P_Sede BOOLEAN, P_Org BOOLEAN)
BEGIN
	INSERT INTO Permisos VALUES (idPermisos, Boss, P_Reserva, P_Nivel, 
                                        P_Bloque, P_Sede, P_Org, 0, 0, 0, 0, 0);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insert_Reserva
-- -----------------------------------------------------

USE `SpaceAdmind`;
DROP procedure IF EXISTS `SpaceAdmind`.`insert_Reserva`;

DELIMITER $$
USE `SpaceAdmind`$$
CREATE PROCEDURE `insert_Reserva` (idEspacio INT, idNivel INT, idBloque INT, idSede INT, idOrgCreador VARCHAR(45),
									idOrgConsecutivo INT, idUsuario VARCHAR(97),Lunes BOOL, Martes BOOL,Miercoles BOOL
                                    ,Jueves BOOL,Viernes BOOL, Sabado BOOL, Domingo BOOL,fechaInicio DATE, fechaFin DATE,
                                    horaInicio TIME,horaFin TIME)
BEGIN
	declare idDiasHabiles VARCHAR(17);
    
    SET idDiasHabiles = CONCAT(Lunes,Martes,Miercoles,Jueves,Viernes,Sabado,Domingo);
	
	INSERT INTO DiasHabiles values(idDiasHabiles,Lunes,Martes,Miercoles,Jueves,Viernes,Sabado,Domingo);
    
    INSERT INTO  Reserva VALUES(0,idEspacio , idNivel , idBloque , idSede , idOrgCreador,
									idOrgConsecutivo , idUsuario ,idDiasHabiles, fechaInicio,fechaFin,
                                    horaInicio,horaFin, NOW());
    
    

END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `SpaceAdmind`.`Pais_Dep_Ciudad`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`Pais_Dep_Ciudad` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`Pais_Dep_Ciudad`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `Pais_Dep_Ciudad` AS

SELECT Pais.idPais as Pais ,Departamento.idDepNombre as Departamento ,Ciudad.idCiudad as Ciudad
FROM Pais INNER JOIN Departamento on Departamento.idPais = Pais.idPais
INNER JOIN Ciudad on Ciudad.idDepartamento = Departamento.idDepNombre;

-- -----------------------------------------------------
-- View `SpaceAdmind`.`Perfil_Usuario`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`Perfil_Usuario` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`Perfil_Usuario`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `Perfil_Usuario` AS

select Usuario.idUsuario,Usuario.nombreUsuario,Usuario.descripcion,
		Usuario.telefonoCelular,Usuario.correoElectronico,
        Usuario.estadousuario,Usuario.fechaCreacion,
		PrivacidadUsuario.MostrarCorreo,PrivacidadUsuario.MostrarOrgPertenece,
		PrivacidadUsuario.MostrarOrgPropias,PrivacidadUsuario.MostrarRedesSociales,
        PrivacidadUsuario.MostrarTelefono,
        
        RedesSociales.FaceBook,RedesSociales.Twitter,RedesSociales.Linkedin,
        RedesSociales.Instagram,RedesSociales.Google
        
        
from Usuario Inner join PrivacidadUsuario on Usuario.idPrivacidad = PrivacidadUsuario.idPrivacidadUsuario
inner join RedesSociales on RedesSociales.idRedesSociales  = Usuario.idRedesSociales;

-- -----------------------------------------------------
-- View `SpaceAdmind`.`Org_Administradores`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`Org_Administradores` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`Org_Administradores`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `Org_Administradores` AS


select Organizacion.idUsuarioCreador as 'Usuario_Creador', 
	Organizacion.consecutivoOrg as 'Contador',  
    
    
    (select Usuario.nombreUsuario 
    from Usuario 
    where Usuario.idUsuario = Organizacion.idUsuarioCreador ) as Encargado,
    
    
	true as Jefe,true as Sede, true as Bloque, true as Nivel,
    concat( Organizacion.idUsuarioCreador + "_$_"+ Organizacion.consecutivoOrg + "_#_" + Sede.idSede) as 'Identificador'
    
from Organizacion inner join Sede on Sede.idOrgContador = Organizacion.consecutivoOrg and Sede.idOrgUsuarioCreador = Organizacion.idUsuarioCreador

union


select Organizacion.idUsuarioCreador as 'Usuario_Creador', 
	Organizacion.consecutivoOrg as 'Contador', 
    
    
    (select Usuario.nombreUsuario 
		from Usuario inner join OrgUsuario on Usuario.idUsuario = OrgUsuario.idusuario 
        where OrgUsuario.idOrgUsuario = Sede.idUsuarioEncargado) as Encargado,
	
    
    false as Jefe,true as Sede, true as Bloque, true as Nivel,
    concat( Organizacion.idUsuarioCreador + "_$_"+ Organizacion.consecutivoOrg + "_#_" + Sede.idSede) as 'Identificador'
    
from Organizacion inner join Sede on Sede.idOrgContador = Organizacion.consecutivoOrg and Sede.idOrgUsuarioCreador = Organizacion.idUsuarioCreador

union
 
select Sede.idOrgUsuarioCreador as 'Usuario_Creador', 
	Sede.idOrgContador as 'Contador', 
    
    
    (select Usuario.nombreUsuario 
		from Usuario inner join OrgUsuario on Usuario.idUsuario = OrgUsuario.idusuario 
        where OrgUsuario.idOrgUsuario = Bloque.idUsuarioEncargado) as Encargado,
        
        
	false as Jefe,false as Sede, true as Bloque, true as Nivel,
    concat( Sede.idOrgUsuarioCreador + "_$_"+ Sede.idOrgContador + "_#_" + Sede.idSede + "_@_" + Bloque.idBloque) as 'Identificador'
    
from Sede inner join Bloque on Sede.idOrgContador = Bloque.idOrgConsecutivo and Sede.idOrgUsuarioCreador = Bloque.idOrgCreador


union 

select Bloque.idOrgCreador as 'Usuario_Creador', 
	Bloque.idOrgConsecutivo as 'Contador', 
    
    (select Usuario.nombreUsuario 
		from Usuario inner join OrgUsuario on Usuario.idUsuario = OrgUsuario.idusuario 
        where OrgUsuario.idOrgUsuario = Nivel.idUsuarioEncargado) as Encargado,
        
        
	false as Jefe , false as Sede, false as Bloque, true as Nivel,
    concat( Bloque.idOrgCreador + "_$_"+ Bloque.idOrgConsecutivo + "_#_" + Bloque.idSede + "_@_" + Bloque.idBloque + "_#_" + Nivel.idNivel) as 'Identificador'
    
from Bloque inner join Nivel on Bloque.idOrgConsecutivo = Nivel.idOrgConsecutivo and Bloque.idOrgCreador = Nivel.idOrgCreador;

-- -----------------------------------------------------
-- View `SpaceAdmind`.`reservas_Mias`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`reservas_Mias` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`reservas_Mias`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `reservas_Mias` AS

SELECT 

OrgU.idUsuario as 'Usuario_ID',

(SELECT Organizacion.nombre_Org 
	FROM Organizacion 
	WHERE Organizacion.idUsuarioCreador = Re.idOrgCreador
			AND  Organizacion.consecutivoOrg = Re.idOrgConsecutivo) as Organizacion,

(SELECT Sede.nombreSede
	FROM Sede 
	WHERE Sede.idOrgUsuarioCreador = Re.idOrgCreador
			AND  Sede.idOrgContador = Re.idOrgConsecutivo
            AND  Sede.idSede = Re.idSede) as Sede,
     
(SELECT Bloque.nombreBloque
	FROM Bloque 
	WHERE Bloque.idOrgCreador = Re.idOrgCreador
			AND  Bloque.idOrgConsecutivo = Re.idOrgConsecutivo
            AND  Bloque.idSede = Re.idSede
            AND  Bloque.idBloque = Re.idBloque) as Bloque,
            
(SELECT CONCAT('Piso_Numero '+ Nivel.numeroNivel)
	FROM Nivel 
	WHERE Nivel.idOrgCreador = Re.idOrgCreador
			AND  Nivel.idOrgConsecutivo = Re.idOrgConsecutivo
            AND  Nivel.idSede = Re.idSede
            AND  Nivel.idBloque = Re.idBloque
            AND  Nivel.idNivel = Re.idNivel) as Nivel,
            
(SELECT IF(Espacio.nomenclaturaEspecial = Null, CONCAT(IF( Espacio.idEspacio > 10,"0"+Espacio.idEspacio,Espacio.idEspacio)), CONCAT(Espacio.idEspacio + " Conocidco como: " + Espacio.nomenclaturaEspecial))
	FROM Espacio 
	WHERE Espacio.idOrgCreador = Re.idOrgCreador
			AND  Espacio.idOrgContador = Re.idOrgConsecutivo
            AND  Espacio.idSede = Re.idSede
            AND  Espacio.idBloque = Re.idBloque
            AND  Espacio.idNivel = Re.idNivel
            AND  Espacio.idEspacio = Re.idEspacio) as Espacio,

IF(Re.fechaFin >= NOW(),'Activo','Vencido') as Estado


FROM Reserva as Re INNER JOIN OrgUsuario as OrgU on ( Re.idUsuario = OrgU.idOrgUsuario);

-- -----------------------------------------------------
-- View `SpaceAdmind`.`org_pertenece`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`org_pertenece` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`org_pertenece`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `org_pertenece` AS

SELECT OrgU.idUsuario, OrgU.nombrePilaUser, OrgU.estadoUsuario as 'Estado_Usuario',
		OrgU.fechaEstado as 'Fecha_estado_OrgUser', Org.nombre_Org, Org.estadoOrg as 'Estado_Org'
        
FROM  OrgUsuario as OrgU INNER JOIN Organizacion as Org ON (OrgU.idOrgUsuarioCreador = Org.idUsuarioCreador AND
														OrgU.idOrgContador = Org.consecutivoOrg)
                                                        
                                                        
WHERE not(OrgU.idUsuario = OrgU.idOrgusuarioCreador);

-- -----------------------------------------------------
-- View `SpaceAdmind`.`mensajes_org`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`mensajes_org` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`mensajes_org`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `mensajes_org` AS


SELECT Mensajes.idMensajes, Mensajes.idOrgCreador, Mensajes.idOrgContador,
		Mensajes.asuntoMensaje,Mensajes.descripcionMensaje,
        obtener_OrgUser_Nombre(Mensajes.usuarioAutor) as autor,
        Mensajes.tipoMensaje, Mensajes.fechaMensaje
        
FROM Mensajes;

-- -----------------------------------------------------
-- View `SpaceAdmind`.`sedes_Org`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`sedes_Org` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`sedes_Org`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `sedes_Org` AS

SELECT Sede.idSede, Sede.idOrgUsuarioCreador, Sede.idOrgContador,
		Sede.nombreSede,
		obtener_OrgUser_Nombre(Sede.idUsuarioEncargado) as 'Encargado',
        Sede.fechaCreacion
        
FROM Sede;

-- -----------------------------------------------------
-- View `SpaceAdmind`.`usuarios_Org`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`usuarios_Org` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`usuarios_Org`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `usuarios_Org` AS 

SELECT OrgU.idOrgUsuario, OrgU.idOrgUsuarioCreador, OrgU.idOrgContador,
		obtener_OrgUser_Nombre(OrgU.idOrgUsuario) as Nombre,
        OrgU.idPermisos,OrgU.nombrePilaUser,OrgU.estadoUsuario,OrgU.fechaEstado
        
FROM OrgUsuario as OrgU;

-- -----------------------------------------------------
-- View `SpaceAdmind`.`Nivel_Bloques_Sede_Org`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`Nivel_Bloques_Sede_Org` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`Nivel_Bloques_Sede_Org`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `Nivel_Bloques_Sede_Org` AS

SELECT Nivel.idNivel, Nivel.idBloque,Nivel.idSede, Nivel.idOrgCreador, 
		Nivel.idOrgConsecutivo,
        Nivel.numeroNivel,
		obtener_OrgUser_Nombre(Nivel.idUsuarioEncargado) as 'Encargado',
        IF(EspaciosPublicos.tieneBanos,'Si', 'No') ,
        IF(EspaciosPublicos.tieneCocineta,'Si', 'No') ,
        IF(EspaciosPublicos.tieneSalaEstar,'Si', 'No') ,
        Nivel.descripcionNivel,Nivel.fechaCreacion
        
        
FROM Nivel INNER JOIN EspaciosPublicos ON (Nivel.idEspacioPublico = EspaciosPublicos.idEspaciosPublcos);

-- -----------------------------------------------------
-- View `SpaceAdmind`.`org_info`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`org_info` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`org_info`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `org_info` AS

SELECT Organizacion.idUsuarioCreador , Organizacion.consecutivoOrg, Organizacion.nombre_Org,
			Organizacion.descripcion_Org, Organizacion.idPermisosEstandar,
			RedesSociales.FaceBook, RedesSociales.Twitter, RedesSociales.Linkedin, 
            RedesSociales.Instagram, RedesSociales.Google, Organizacion.telefonoOrg, 
            Organizacion.estadoOrg, Organizacion.fechaCreacion,Organizacion.tipoEnroll
            
		FROM Organizacion INNER JOIN RedesSociales 
			ON (Organizacion.idRedesSociales = RedesSociales.idRedesSociales);

-- -----------------------------------------------------
-- View `SpaceAdmind`.`espacioXreserva`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `SpaceAdmind`.`espacioXreserva` ;
DROP TABLE IF EXISTS `SpaceAdmind`.`espacioXreserva`;
USE `SpaceAdmind`;
CREATE  OR REPLACE VIEW `espacioXreserva` AS


SELECT E.idEspacio, E.idNivel, E.idBloque, E.idSede, E.idOrgCreador, E.idOrgContador,
		R.idReserva
        
        ,(
        
        SELECT lunes
		FROM DiasHabiles
        WHERE DiasHabiles.idDiasHabiles = R.idDiasReserva
        
        ) as lunes
        ,(
        
        SELECT martes
		FROM DiasHabiles
        WHERE DiasHabiles.idDiasHabiles = R.idDiasReserva
        
        ) as martes
        ,(
        
        SELECT miercoles
		FROM DiasHabiles
        WHERE DiasHabiles.idDiasHabiles = R.idDiasReserva
        
        ) as miercoles
        ,(
        
        SELECT jueves
		FROM DiasHabiles
        WHERE DiasHabiles.idDiasHabiles = R.idDiasReserva
        
        ) as jueves
        ,(
        
        SELECT viernes
		FROM DiasHabiles
        WHERE DiasHabiles.idDiasHabiles = R.idDiasReserva
        
        ) as viernes
        ,(
        
        SELECT sabado
		FROM DiasHabiles
        WHERE DiasHabiles.idDiasHabiles = R.idDiasReserva
        
        ) as sabado
        ,(
        
        SELECT domingo
		FROM DiasHabiles
        WHERE DiasHabiles.idDiasHabiles = R.idDiasReserva
        
        ) as domingo,
        
        R.fechaInicio, R.fechaFin, R.horaInicio, R.horaFin

FROM  Espacio as E left join Reserva AS R on (R.idEspacio = E.idEspacio AND
											R.idNivel  = E.idNivel AND
                                            R.idBloque = E.idBloque AND
                                            R.idSede = E.idSede AND
                                            R.idOrgCreador = E.idOrgCreador AND
                                            R.idOrgConsecutivo = E.idOrgContador)
                                            
WHERE R.fechaFin >= NOW() OR IFNULL(R.fechaFin,TRUE);
USE `SpaceAdmind`;

DELIMITER $$

USE `SpaceAdmind`$$
DROP TRIGGER IF EXISTS `SpaceAdmind`.`Organizacion_BEFORE_INSERT` $$
USE `SpaceAdmind`$$
CREATE DEFINER = CURRENT_USER TRIGGER `SpaceAdmind`.`Organizacion_BEFORE_INSERT` AFTER INSERT ON `Organizacion` 

FOR EACH ROW

BEGIN
	
    DECLARE idOrgUser  VARCHAR(97);
	
	SET idOrgUser =  asociar_OrgUsuario(NEW.idUsuarioCreador, NEW.consecutivoOrg,
								NEW.idUsuarioCreador, 'theBoss',
								NEW.idUsuarioCreador, '1');
	
    

END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
